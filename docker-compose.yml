version: '3.8'

networks:
  kladovka_network:
    driver: bridge
  

services:
  kladovka:
    image: ${DOCKER_REGISTRY-}kladovka
    build:
      context: .
      dockerfile: Kladovka/Dockerfile
    ports:
      - "5000:8081"
    networks:
      - kladovka_network

  security:
    image: ${DOCKER_REGISTRY-}security
    build:
      context: .
      dockerfile: Security/Dockerfile
    ports:
      - "5001:8081"
    networks:
      - kladovka_network


  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      KC_HEALTH_ENABLED: true
      KC_RUN_IN_CONTAINER: true
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres:5432/kladovka
      KC_DB_USERNAME: postgres
      KC_DB_PASSWORD: 123
      KC_PROXY_HEADERS: xforwarded
    ports:
      - 8090:8080
    volumes:
      - ./.containers/identity:/opt/keycloak/data
    depends_on:
      - postgres
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:8080/realms/master"]
      interval: 30s
      retries: 3
      timeout: 5s
    networks:
      - kladovka_network

  postgres:
    image: postgres:latest
    container_name: postgres
    environment:
      POSTGRES_DB: kladovka
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 123
    ports:
      - 5432:5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - kladovka_network

  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:7.6.1
    restart: on-failure
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 2181:2181
    networks:
      - kladovka_network

  kafka:
    container_name: kafka
    hostname: kafka
    image: confluentinc/cp-kafka:7.6.1
    restart: on-failure
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
    ports:
      - 9092:9092
    networks:
      - kladovka_network

  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    restart: always
    environment:
      DYNAMIC_CONFIG_ENABLED: true
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    ports:
      - 8100:8080
    depends_on:
      - zookeeper
      - kafka
    networks:
      - kladovka_network
volumes:
  postgres_data:
