//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 612 // Disable "CS0612 '...' is obsolete"
#pragma warning disable 649 // Disable "CS0649 Field is never assigned to, and will always have its default value null"
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"
#pragma warning disable 8604 // Disable "CS8604 Possible null reference argument for parameter"
#pragma warning disable 8625 // Disable "CS8625 Cannot convert null literal to non-nullable reference type"
#pragma warning disable 8765 // Disable "CS8765 Nullability of type of parameter doesn't match overridden member (possibly because of nullability attributes)."

namespace Security.Clients.Keycloak.Generated
{
    using System = global::System;

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial interface IKeycloakGeneratedExternalApiClient
    {

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get accessible realms Returns a list of accessible realms. The list is filtered based on what realms the caller is allowed to view.
        /// </summary>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RealmRepresentation>> RealmsAllAsync(bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import a realm. Imports a realm from a full representation of that realm.
        /// </summary>
        /// <remarks>
        /// Realm name must be unique.
        /// </remarks>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmsPOSTAsync(System.IO.Stream body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the top-level representation of the realm It will not include nested information like User and Client representations.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RealmRepresentation> RealmsGETAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the top-level information of the realm Any user, roles or client information in the representation will be ignored.
        /// </summary>
        /// <remarks>
        /// This will only update top-level attributes of the realm.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmsPUTAsync(string realm, RealmRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the realm
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmsDELETEAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get admin events Returns all admin events, or filters events based on URL query parameters listed here
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="authUser">user id</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AdminEventRepresentation>> AdminEventsAllAsync(string realm, string? authClient = null, string? authIpAddress = null, string? authRealm = null, string? authUser = null, string? dateFrom = null, string? dateTo = null, int? first = null, int? max = null, System.Collections.Generic.IEnumerable<string>? operationTypes = null, string? resourcePath = null, System.Collections.Generic.IEnumerable<string>? resourceTypes = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all admin events
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AdminEventsAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clear any user login failures for all users This can release temporary disabled users
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersDELETEAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get status of a username in brute force detection
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> UsersGETAsync(string userId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Clear any user login failures for the user This can release temporary disabled user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersDELETE2Async(string userId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authenticator providers Returns a stream of authenticator providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> AuthenticatorProvidersAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client authenticator providers Returns a stream of client authenticator providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> ClientAuthenticatorProvidersAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create new authenticator configuration
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task ConfigPOSTAsync(string realm, AuthenticatorConfigRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authenticator provider's configuration description
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthenticatorConfigInfoRepresentation> ConfigDescriptionAsync(string providerId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authenticator configuration
        /// </summary>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthenticatorConfigRepresentation> ConfigGETAsync(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update authenticator configuration
        /// </summary>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConfigPUTAsync(string id, string realm, AuthenticatorConfigRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete authenticator configuration
        /// </summary>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConfigDELETEAsync(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add new authentication execution
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecutionsPOSTAsync(string realm, AuthenticationExecutionRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Single Execution
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthenticationExecutionRepresentation> ExecutionsGETAsync(string executionId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete execution
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecutionsDELETEAsync(string executionId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update execution with new configuration
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConfigPOST2Async(string executionId, string realm, AuthenticatorConfigRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get execution's configuration
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="id">Configuration id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<AuthenticatorConfigRepresentation> ConfigGET2Async(string executionId, string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lower execution's priority
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LowerPriorityAsync(string executionId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Raise execution's priority
        /// </summary>
        /// <param name="executionId">Execution id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RaisePriorityAsync(string executionId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authentication flows Returns a stream of authentication flows.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthenticationFlowRepresentation>> FlowsAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new authentication flow
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FlowsPOSTAsync(string realm, AuthenticationFlowRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Copy existing authentication flow under a new name The new name is given as 'newName' attribute of the passed JSON object
        /// </summary>
        /// <param name="flowAlias">name of the existing authentication flow</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CopyAsync(string flowAlias, string realm, System.Collections.Generic.IDictionary<string, string>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authentication executions for a flow
        /// </summary>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AuthenticationExecutionInfoRepresentation>> ExecutionsAllAsync(string flowAlias, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update authentication executions of a Flow
        /// </summary>
        /// <param name="flowAlias">Flow alias</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecutionsPUTAsync(string flowAlias, string realm, AuthenticationExecutionInfoRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add new authentication execution to a flow
        /// </summary>
        /// <param name="flowAlias">Alias of parent flow</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecutionAsync(string flowAlias, string realm, System.Collections.Generic.IDictionary<string, object>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add new flow with new execution to existing flow
        /// </summary>
        /// <param name="flowAlias">Alias of parent authentication flow</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FlowAsync(string flowAlias, string realm, System.Collections.Generic.IDictionary<string, object>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get authentication flow for id
        /// </summary>
        /// <param name="id">Flow id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AuthenticationFlowRepresentation> FlowsGETAsync(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an authentication flow
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FlowsPUTAsync(string id, string realm, AuthenticationFlowRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an authentication flow
        /// </summary>
        /// <param name="id">Flow id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FlowsDELETEAsync(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get form action providers Returns a stream of form action providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> FormActionProvidersAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get form providers Returns a stream of form providers.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> FormProvidersAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get configuration descriptions for all clients
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ConfigPropertyRepresentation>>> PerClientConfigDescriptionAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Register a new required actions
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RegisterRequiredActionAsync(string realm, System.Collections.Generic.IDictionary<string, string>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get required actions Returns a stream of required actions.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RequiredActionProviderRepresentation>> RequiredActionsAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get required action for alias
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequiredActionProviderRepresentation> RequiredActionsGETAsync(string alias, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update required action
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequiredActionsPUTAsync(string alias, string realm, RequiredActionProviderRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete required action
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RequiredActionsDELETEAsync(string alias, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get RequiredAction configuration
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequiredActionConfigRepresentation> ConfigGET3Async(string alias, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update RequiredAction configuration
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConfigPUT2Async(string alias, string realm, RequiredActionConfigRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete RequiredAction configuration
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConfigDELETE2Async(string alias, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get RequiredAction provider configuration description
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RequiredActionConfigInfoRepresentation> ConfigDescription2Async(string alias, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Lower required action's priority
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LowerPriority2Async(string alias, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Raise required action's priority
        /// </summary>
        /// <param name="alias">Alias of required action</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RaisePriority2Async(string alias, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get unregistered required actions Returns a stream of unregistered required actions.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, string>>> UnregisteredRequiredActionsAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Base path for importing clients under this realm.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientRepresentation> ClientDescriptionConverterAsync(string realm, string? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientPoliciesRepresentation> PoliciesGETAsync(string realm, bool? include_global_policies = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PoliciesPUTAsync(string realm, ClientPoliciesRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientProfilesRepresentation> ProfilesGETAsync(string realm, bool? include_global_profiles = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProfilesPUTAsync(string realm, ClientProfilesRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Base path for retrieve providers with the configProperties properly filled
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentTypeRepresentation>> ProvidersAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> ClientScopesAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new client scope Client Scope’s name must be unique!
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientScopesPOSTAsync(string realm, ClientScopeRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get representation of the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientScopeRepresentation> ClientScopesGETAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientScopesPUTAsync(string realm, string client_scope_id, ClientScopeRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientScopesDELETEAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddModelsAsync(string realm, string client_scope_id, System.Collections.Generic.IEnumerable<ProtocolMapperRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ModelsAllAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModelsPOSTAsync(string realm, string client_scope_id, ProtocolMapperRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProtocolMapperRepresentation> ModelsGETAsync(string id, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModelsPUTAsync(string id, string realm, string client_scope_id, ProtocolMapperRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModelsDELETEAsync(string id, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ProtocolAsync(string protocol, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all scope mappings for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<MappingsRepresentation> ScopeMappingsAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the roles associated with a client's scope Returns roles for the client.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAllAsync(string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add client-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsPOSTAsync(string realm, string client_scope_id, string client, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove client-level roles from the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsDELETEAsync(string realm, string client_scope_id, string client, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// The available client-level roles Returns the roles for the client that can be associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> AvailableAsync(string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective client roles Returns the roles for the client that are associated with the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositeAsync(string realm, string client_scope_id, string client, bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAllAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a set of realm-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmPOSTAsync(string realm, string client_scope_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a set of realm-level roles from the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmDELETEAsync(string realm, string client_scope_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that are available to attach to this client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available2Async(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// The method is really to show a comprehensive total view of realm-level roles associated with the client.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite2Async(string realm, string client_scope_id, bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client session stats Returns a JSON map.
        /// </summary>
        /// <remarks>
        /// The key is the client id, the value is the number of sessions that currently are active with that client. Only clients that actually have a session associated with them will be in this map.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, string>>> ClientSessionStatsAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client scopes belonging to the realm Returns a list of client scopes belonging to the realm
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> ClientTemplatesAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new client scope Client Scope’s name must be unique!
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientTemplatesPOSTAsync(string realm, ClientScopeRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get representation of the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientScopeRepresentation> ClientTemplatesGETAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientTemplatesPUTAsync(string realm, string client_scope_id, ClientScopeRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the client scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientTemplatesDELETEAsync(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddModels2Async(string realm, string client_scope_id, System.Collections.Generic.IEnumerable<ProtocolMapperRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ModelsAll2Async(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModelsPOST2Async(string realm, string client_scope_id, ProtocolMapperRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProtocolMapperRepresentation> ModelsGET2Async(string id, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModelsPUT2Async(string id, string realm, string client_scope_id, ProtocolMapperRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModelsDELETE2Async(string id, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> Protocol2Async(string protocol, string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all scope mappings for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<MappingsRepresentation> ScopeMappings2Async(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the roles associated with a client's scope Returns roles for the client.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll2Async(string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add client-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsPOST2Async(string realm, string client_scope_id, string client, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove client-level roles from the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsDELETE2Async(string realm, string client_scope_id, string client, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// The available client-level roles Returns the roles for the client that can be associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available3Async(string realm, string client_scope_id, string client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective client roles Returns the roles for the client that are associated with the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite3Async(string realm, string client_scope_id, string client, bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll2Async(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a set of realm-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmPOST2Async(string realm, string client_scope_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a set of realm-level roles from the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmDELETE2Async(string realm, string client_scope_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that are available to attach to this client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available4Async(string realm, string client_scope_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// The method is really to show a comprehensive total view of realm-level roles associated with the client.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite4Async(string realm, string client_scope_id, bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List all client types available in the current realm
        /// </summary>
        /// <remarks>
        /// This endpoint returns a list of both global and realm level client types and the attributes they set
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientTypesRepresentation> ClientTypesGETAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a client type
        /// </summary>
        /// <remarks>
        /// This endpoint allows you to update a realm level client type
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientTypesPUTAsync(string realm, ClientTypesRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get clients belonging to the realm.
        /// </summary>
        /// <remarks>
        /// If a client can’t be retrieved from the storage due to a problem with the underlying storage, it is silently removed from the returned list. This ensures that concurrent modifications to the list don’t prevent callers from retrieving this list.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="clientId">filter by clientId</param>
        /// <param name="first">the first result</param>
        /// <param name="max">the max results to return</param>
        /// <param name="search">whether this is a search query or a getClientById query</param>
        /// <param name="viewableOnly">filter clients that cannot be viewed in full by admin</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientRepresentation>> ClientsAll3Async(string realm, string? clientId = null, int? first = null, int? max = null, string? q = null, bool? search = null, bool? viewableOnly = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new client Client’s client_id must be unique!
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsPOST3Async(string realm, ClientRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientInitialAccessPresentation>> ClientsInitialAccessAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new initial access token.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientInitialAccessCreatePresentation> ClientsInitialAccessPOSTAsync(string realm, ClientInitialAccessCreatePresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsInitialAccessDELETEAsync(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get representation of the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientRepresentation> ClientsGETAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsPUTAsync(string realm, string client_uuid, ClientRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsDELETE3Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResourceServerRepresentation> ResourceServerGETAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResourceServerPUTAsync(string realm, string client_uuid, ResourceServerRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ImportAsync(string realm, string client_uuid, ResourceServerRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AbstractPolicyRepresentation>> PermissionAllAsync(string realm, string client_uuid, string? fields = null, int? first = null, int? max = null, string? name = null, string? owner = null, bool? permission = null, string? policyId = null, string? resource = null, string? scope = null, string? type = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PermissionAsync(string realm, string client_uuid, string? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PolicyEvaluationResponse> EvaluateAsync(string realm, string client_uuid, PolicyEvaluationRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyProviderRepresentation>> ProvidersAll2Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AbstractPolicyRepresentation> SearchAsync(string realm, string client_uuid, string? fields = null, string? name = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<AbstractPolicyRepresentation>> PolicyAllAsync(string realm, string client_uuid, string? fields = null, int? first = null, int? max = null, string? name = null, string? owner = null, bool? permission = null, string? policyId = null, string? resource = null, string? scope = null, string? type = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PolicyAsync(string realm, string client_uuid, string? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PolicyEvaluationResponse> Evaluate2Async(string realm, string client_uuid, PolicyEvaluationRequest? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyProviderRepresentation>> ProvidersAll3Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AbstractPolicyRepresentation> Search2Async(string realm, string client_uuid, string? fields = null, string? name = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceRepresentation>> ResourceAllAsync(string realm, string client_uuid, string? _id = null, bool? deep = null, bool? exactName = null, int? first = null, bool? matchingUri = null, int? max = null, string? name = null, string? owner = null, string? scope = null, string? type = null, string? uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>Created</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResourceRepresentation> ResourcePOSTAsync(string realm, string client_uuid, ResourceRepresentation? body = null, string? _id = null, bool? deep = null, bool? exactName = null, int? first = null, bool? matchingUri = null, int? max = null, string? name = null, string? owner = null, string? scope = null, string? type = null, string? uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResourceRepresentation> Search3Async(string realm, string client_uuid, string? name = null, string? _id = null, bool? deep = null, bool? exactName = null, int? first = null, bool? matchingUri = null, int? max = null, string? owner = null, string? scope = null, string? type = null, string? uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResourceRepresentation> ResourceGETAsync(string resource_id, string realm, string client_uuid, string? _id = null, bool? deep = null, bool? exactName = null, int? first = null, bool? matchingUri = null, int? max = null, string? name = null, string? owner = null, string? scope = null, string? type = null, string? uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResourcePUTAsync(string resource_id, string realm, string client_uuid, ResourceRepresentation? body = null, string? _id = null, bool? deep = null, bool? exactName = null, int? first = null, bool? matchingUri = null, int? max = null, string? name = null, string? owner = null, string? scope = null, string? type = null, string? uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResourceDELETEAsync(string resource_id, string realm, string client_uuid, string? _id = null, bool? deep = null, bool? exactName = null, int? first = null, bool? matchingUri = null, int? max = null, string? name = null, string? owner = null, string? scope = null, string? type = null, string? uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AttributesAsync(string resource_id, string realm, string client_uuid, string? _id = null, bool? deep = null, bool? exactName = null, int? first = null, bool? matchingUri = null, int? max = null, string? name = null, string? owner = null, string? scope = null, string? type = null, string? uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyRepresentation>> PermissionsAllAsync(string resource_id, string realm, string client_uuid, string? _id = null, bool? deep = null, bool? exactName = null, int? first = null, bool? matchingUri = null, int? max = null, string? name = null, string? owner = null, string? scope = null, string? type = null, string? uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScopeRepresentation>> ScopesAsync(string resource_id, string realm, string client_uuid, string? _id = null, bool? deep = null, bool? exactName = null, int? first = null, bool? matchingUri = null, int? max = null, string? name = null, string? owner = null, string? scope = null, string? type = null, string? uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScopeRepresentation>> ScopeAllAsync(string realm, string client_uuid, int? first = null, int? max = null, string? name = null, string? scopeId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ScopePOSTAsync(string realm, string client_uuid, ScopeRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ScopeRepresentation>> SearchAllAsync(string realm, string client_uuid, string? name = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ScopeRepresentation> ScopeGETAsync(string scope_id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ScopePUTAsync(string scope_id, string realm, string client_uuid, ScopeRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ScopeDELETEAsync(string scope_id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<PolicyRepresentation>> PermissionsAll2Async(string scope_id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ResourceRepresentation>> ResourcesAsync(string scope_id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ResourceServerRepresentation> SettingsAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get key info
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CertificateRepresentation> CertificatesAsync(string realm, string client_uuid, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a keystore file for the client, containing private key and public certificate
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> DownloadAsync(string realm, string client_uuid, string attr, KeyStoreConfig? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a new certificate with new key pair
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CertificateRepresentation> GenerateAsync(string realm, string client_uuid, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a new keypair and certificate, and get the private key file
        /// <br/>
        /// <br/>Generates a keypair and certificate and serves the private key in a specified keystore format.
        /// <br/>Only generated public certificate is saved in Keycloak DB - the private key is not.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<FileResponse> GenerateAndDownloadAsync(string realm, string client_uuid, string attr, KeyStoreConfig? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload certificate and eventually private key
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CertificateRepresentation> UploadAsync(string realm, string client_uuid, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Upload only certificate, not private key
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CertificateRepresentation> UploadCertificateAsync(string realm, string client_uuid, string attr, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the client secret
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CredentialRepresentation> ClientSecretGETAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a new secret for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CredentialRepresentation> ClientSecretPOSTAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the rotated client secret
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<CredentialRepresentation> RotatedGETAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invalidate the rotated secret for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RotatedDELETEAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get default client scopes.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> DefaultClientScopesAllAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DefaultClientScopesPUTAsync(string clientScopeId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DefaultClientScopesDELETEAsync(string clientScopeId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create JSON with payload of example access token
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<AccessToken> GenerateExampleAccessTokenAsync(string realm, string client_uuid, string? scope = null, string? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create JSON with payload of example id token
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IDToken> GenerateExampleIdTokenAsync(string realm, string client_uuid, string? scope = null, string? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create JSON with payload of example user info
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> GenerateExampleUserinfoAsync(string realm, string client_uuid, string? scope = null, string? userId = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return list of all protocol mappers, which will be used when generating tokens issued for particular client.
        /// </summary>
        /// <remarks>
        /// This means protocol mappers assigned to this client directly and protocol mappers assigned to all client scopes of this client.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperEvaluationRepresentation>> ProtocolMappersAsync(string realm, string client_uuid, string? scope = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective scope mapping of all roles of particular role container, which this client is defacto allowed to have in the accessToken issued for him.
        /// </summary>
        /// <remarks>
        /// This contains scope mappings, which this client has directly, as well as scope mappings, which are granted to all client scopes, which are linked with this client.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="roleContainerId">either realm name OR client UUID</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> GrantedAsync(string realm, string client_uuid, string roleContainerId, string? scope = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get roles, which this client doesn't have scope for and can't have them in the accessToken issued for him.
        /// </summary>
        /// <remarks>
        /// Defacto all the other roles of particular role container, which are not in {@link #getGrantedScopeMappings()}
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="roleContainerId">either realm name OR client UUID</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> NotGrantedAsync(string realm, string client_uuid, string roleContainerId, string? scope = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ProvidersAsync(string providerId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGETAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUTAsync(string realm, string client_uuid, ManagementPermissionReference? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Register a cluster node with the client Manually register cluster node to this client - usually it’s not needed to call this directly as adapter should handle by sending registration request to Keycloak
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task NodesPOSTAsync(string realm, string client_uuid, System.Collections.Generic.IDictionary<string, string>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unregister a cluster node from the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task NodesDELETEAsync(string node, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get application offline session count Returns a number of offline user sessions associated with this client { "count": number }
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> OfflineSessionCountAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get offline sessions for client Returns a list of offline user sessions associated with this client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="first">Paging offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> OfflineSessionsAsync(string realm, string client_uuid, int? first = null, int? max = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get optional client scopes.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> OptionalClientScopesAllAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OptionalClientScopesPUTAsync(string clientScopeId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OptionalClientScopesDELETEAsync(string clientScopeId, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create multiple mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task AddModels3Async(string realm, string client_uuid, System.Collections.Generic.IEnumerable<ProtocolMapperRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> ModelsAll3Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a mapper
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModelsPOST3Async(string realm, string client_uuid, ProtocolMapperRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapper by id
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ProtocolMapperRepresentation> ModelsGET3Async(string id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModelsPUT3Async(string id, string realm, string client_uuid, ProtocolMapperRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the mapper
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ModelsDELETE3Async(string id, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers by name for a specific protocol
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ProtocolMapperRepresentation>> Protocol3Async(string protocol, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Push the client's revocation policy to its admin URL If the client has an admin URL, push revocation policy to it.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GlobalRequestResult> PushRevocationAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Generate a new registration access token for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ClientRepresentation> RegistrationAccessTokenAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RolesAllAsync(string realm, string client_uuid, bool? briefRepresentation = null, int? first = null, int? max = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RolesPOSTAsync(string realm, string client_uuid, RoleRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleRepresentation> RolesGETAsync(string role_name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RolesPUTAsync(string role_name, string realm, string client_uuid, RoleRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RolesDELETEAsync(string role_name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositesAllAsync(string role_name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompositesPOSTAsync(string role_name, string realm, string client_uuid, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove roles from the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompositesDELETEAsync(string role_name, string realm, string client_uuid, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client-level roles for the client that are in the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll4Async(string client_uuid, string role_name, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles of the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll3Async(string role_name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> GroupsAllAsync(string role_name, string realm, string client_uuid, bool? briefRepresentation = null, int? first = null, int? max = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET2Async(string role_name, string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT2Async(string role_name, string realm, string client_uuid, ManagementPermissionReference? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> UsersAllAsync(string role_name, string realm, string client_uuid, bool? briefRepresentation = null, int? first = null, int? max = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all scope mappings for the client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<MappingsRepresentation> ScopeMappings3Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the roles associated with a client's scope Returns roles for the client.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll5Async(string realm, string client_uuid, string client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add client-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsPOST4Async(string realm, string client_uuid, string client, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove client-level roles from the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsDELETE4Async(string realm, string client_uuid, string client, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// The available client-level roles Returns the roles for the client that can be associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available5Async(string realm, string client_uuid, string client, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective client roles Returns the roles for the client that are associated with the client's scope.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite5Async(string realm, string client_uuid, string client, bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles associated with the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll4Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a set of realm-level roles to the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmPOST3Async(string realm, string client_uuid, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a set of realm-level roles from the client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmDELETE3Async(string realm, string client_uuid, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that are available to attach to this client's scope
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available6Async(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective realm-level roles associated with the client’s scope What this does is recurse any composite roles associated with the client’s scope and adds the roles to this lists.
        /// </summary>
        /// <remarks>
        /// The method is really to show a comprehensive total view of realm-level roles associated with the client.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite6Async(string realm, string client_uuid, bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a user dedicated to the service account
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserRepresentation> ServiceAccountUserAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get application session count Returns a number of user sessions associated with this client { "count": number }
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> SessionCountAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test if registered cluster nodes are available Tests availability by sending 'ping' request to all cluster nodes.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GlobalRequestResult> TestNodesAvailableAsync(string realm, string client_uuid, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get user sessions for client Returns a list of user sessions associated with this client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_uuid">id of client (not client-id!)</param>
        /// <param name="first">Paging offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> UserSessionsAsync(string realm, string client_uuid, int? first = null, int? max = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentRepresentation>> ComponentsAllAsync(string realm, string? name = null, string? parent = null, string? type = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ComponentsPOSTAsync(string realm, ComponentRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ComponentRepresentation> ComponentsGETAsync(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ComponentsPUTAsync(string id, string realm, ComponentRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ComponentsDELETEAsync(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List of subcomponent types that are available to configure for a particular parent component.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ComponentTypeRepresentation>> SubComponentTypesAsync(string id, string realm, string? type = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> CredentialRegistratorsAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm default client scopes.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> DefaultDefaultClientScopesAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DefaultDefaultClientScopesPUTAsync(string clientScopeId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DefaultDefaultClientScopesDELETEAsync(string clientScopeId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get group hierarchy.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> DefaultGroupsAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DefaultGroupsPUTAsync(string groupId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DefaultGroupsDELETEAsync(string groupId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm optional client scopes.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<ClientScopeRepresentation>> DefaultOptionalClientScopesAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DefaultOptionalClientScopesPUTAsync(string clientScopeId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DefaultOptionalClientScopesDELETEAsync(string clientScopeId, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get events Returns all events, or filters them based on URL query parameters listed here
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client">App or oauth client name</param>
        /// <param name="dateFrom">From date</param>
        /// <param name="dateTo">To date</param>
        /// <param name="first">Paging offset</param>
        /// <param name="ipAddress">IP Address</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="type">The types of events to return</param>
        /// <param name="user">User id</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<EventRepresentation>> EventsAllAsync(string realm, string? client = null, string? dateFrom = null, string? dateTo = null, int? first = null, string? ipAddress = null, int? max = null, System.Collections.Generic.IEnumerable<string>? type = null, string? user = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete all events
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task EventsAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the events provider configuration Returns JSON object with events provider configuration
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RealmEventsConfigRepresentation> ConfigGET4Async(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Update the events provider Change the events provider and/or its configuration
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConfigPUT3Async(string realm, RealmEventsConfigRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GroupRepresentation> GroupByPathAsync(string path, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get group hierarchy.  Only name and ids are returned.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> GroupsAll2Async(string realm, bool? briefRepresentation = null, bool? exact = null, int? first = null, int? max = null, bool? populateHierarchy = null, string? q = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// create or add a top level realm groupSet or create child.
        /// </summary>
        /// <remarks>
        /// This will update the group and set the parent if it exists. Create it and set the parent if the group doesn’t exist.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GroupsPOSTAsync(string realm, GroupRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the groups counts.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> CountAsync(string realm, string? search = null, bool? top = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GroupRepresentation> GroupsGETAsync(string realm, string group_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update group, ignores subgroups.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GroupsPUTAsync(string realm, string group_id, GroupRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GroupsDELETEAsync(string realm, string group_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return a paginated list of subgroups that have a parent group corresponding to the group on the URL
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">Boolean which defines whether brief groups representations are returned or not (default: false)</param>
        /// <param name="exact">Boolean which defines whether the params "search" must match exactly or not</param>
        /// <param name="first">The position of the first result to be returned (pagination offset).</param>
        /// <param name="max">The maximum number of results that are to be returned. Defaults to 10</param>
        /// <param name="search">A String representing either an exact group name or a partial name</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> ChildrenAllAsync(string realm, string group_id, bool? briefRepresentation = null, bool? exact = null, int? first = null, int? max = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set or create child.
        /// </summary>
        /// <remarks>
        /// This will just set the parent if it exists. Create it and set the parent if the group doesn’t exist.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ChildrenAsync(string realm, string group_id, GroupRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET3Async(string realm, string group_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT3Async(string realm, string group_id, ManagementPermissionReference? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get users Returns a stream of users, filtered according to query parameters
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">Only return basic information (only guaranteed to return id, username, created, first and last name, email, enabled state, email verification state, federation link, and access. Note that it means that namely user attributes, required actions, and not before are not returned.)</param>
        /// <param name="first">Pagination offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> MembersAllAsync(string realm, string group_id, bool? briefRepresentation = null, int? first = null, int? max = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MappingsRepresentation> RoleMappingsAsync(string realm, string group_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client-level role mappings for the user or group, and the app
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll6Async(string realm, string group_id, string client_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add client-level roles to the user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsPOST5Async(string realm, string group_id, string client_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete client-level roles from user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsDELETE5Async(string realm, string group_id, string client_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available client-level roles that can be mapped to the user or group
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available7Async(string realm, string group_id, string client_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective client-level role mappings This recurses any composite roles
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite7Async(string realm, string group_id, string client_id, bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll5Async(string realm, string group_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add realm-level role mappings to the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmPOST4Async(string realm, string group_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmDELETE4Async(string realm, string group_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that can be mapped
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available8Async(string realm, string group_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective realm-level role mappings This will recurse all composite roles to get the result.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite8Async(string realm, string group_id, bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import identity provider from JSON body
        /// </summary>
        /// <remarks>
        /// Import identity provider from uploaded JSON file
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, string>> ImportConfigAsync(string realm, System.Collections.Generic.IDictionary<string, object>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List identity providers
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="first">Pagination offset</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="realmOnly">Boolean which defines if only realm-level IDPs (not associated with orgs) should be returned (default: false)</param>
        /// <param name="search">Filter specific providers by name. Search can be prefix (name*), contains (*name*) or exact ("name"). Default prefixed.</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProviderRepresentation>> InstancesAllAsync(string realm, bool? briefRepresentation = null, int? first = null, int? max = null, bool? realmOnly = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InstancesPOSTAsync(string realm, IdentityProviderRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityProviderRepresentation> InstancesGETAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InstancesPUTAsync(string realm, string alias, IdentityProviderRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InstancesDELETEAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Export public broker configuration for identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="format">Format to use</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExportAsync(string realm, string alias, string? format = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET4Async(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether client Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT4Async(string realm, string alias, ManagementPermissionReference? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapper types for identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, IdentityProviderMapperTypeRepresentation>> MapperTypesAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mappers for identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProviderMapperRepresentation>> MappersAllAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a mapper to identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MappersPOSTAsync(string realm, string alias, IdentityProviderMapperRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get mapper by id for the identity provider
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityProviderMapperRepresentation> MappersGETAsync(string id, string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a mapper for the identity provider
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MappersPUTAsync(string id, string realm, string alias, IdentityProviderMapperRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a mapper for the identity provider
        /// </summary>
        /// <param name="id">Mapper id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MappersDELETEAsync(string id, string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reaload keys for the identity provider if the provider supports it, "true" is returned if reload was performed, "false" if not.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<bool> ReloadKeysAsync(string realm, string alias, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get the identity provider factory for that provider id
        /// </summary>
        /// <param name="provider_id">The provider id to get the factory</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<object> Providers2Async(string provider_id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<KeysMetadataRepresentation> KeysAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> LocalizationAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, string>> LocalizationGETAsync(string locale, string realm, bool? useRealmDefaultLocaleFallback = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Import localization from uploaded JSON file
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LocalizationPOSTAsync(string locale, string realm, System.Collections.Generic.IDictionary<string, string>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LocalizationDELETEAsync(string locale, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<string> LocalizationGET2Async(string key, string locale, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LocalizationPUTAsync(string key, string locale, string realm, string? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LocalizationDELETE2Async(string key, string locale, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes all user sessions.
        /// </summary>
        /// <remarks>
        /// Any client that has an admin url will also be told to invalidate any sessions they have.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GlobalRequestResult> LogoutAllAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a paginated list of organizations filtered according to the specified parameters
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="exact">Boolean which defines whether the param 'search' must match exactly or not</param>
        /// <param name="first">The position of the first result to be processed (pagination offset)</param>
        /// <param name="max">The maximum number of results to be returned - defaults to 10</param>
        /// <param name="q">A query to search for custom attributes, in the format 'key1:value2 key2:value2'</param>
        /// <param name="search">A String representing either an organization name or domain</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRepresentation>> OrganizationsAllAsync(string realm, bool? exact = null, int? first = null, int? max = null, string? q = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Creates a new organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OrganizationsPOSTAsync(string realm, OrganizationRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the organizations associated with the user that has the specified id
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRepresentation>> OrganizationsAll2Async(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the organization representation
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<OrganizationRepresentation> OrganizationsGETAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Updates the organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OrganizationsPUTAsync(string realm, string id, OrganizationRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Deletes the organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task OrganizationsDELETEAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns all identity providers associated with the organization
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<IdentityProviderRepresentation>> IdentityProvidersAllAsync(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds the identity provider with the specified id to the organization
        /// </summary>
        /// <remarks>
        /// Adds, or associates, an existing identity provider with the organization. If no identity provider is found, or if it is already associated with the organization, an error response is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task IdentityProvidersPOSTAsync(string realm, string id, string? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the identity provider associated with the organization that has the specified alias
        /// </summary>
        /// <remarks>
        /// Searches for an identity provider with the given alias. If one is found and is associated with the organization, it is returned. Otherwise, an error response with status NOT_FOUND is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<IdentityProviderRepresentation> IdentityProvidersGETAsync(string alias, string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes the identity provider with the specified alias from the organization
        /// </summary>
        /// <remarks>
        /// Breaks the association between the identity provider and the organization. The provider itself is not deleted. If no provider is found, or if it is not currently associated with the org, an error response is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task IdentityProvidersDELETEAsync(string alias, string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a paginated list of organization members filtered according to the specified parameters
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="exact">Boolean which defines whether the param 'search' must match exactly or not</param>
        /// <param name="first">The position of the first result to be processed (pagination offset)</param>
        /// <param name="max">The maximum number of results to be returned. Defaults to 10</param>
        /// <param name="search">A String representing either a member's username, e-mail, first name, or last name.</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<MemberRepresentation>> MembersAll2Async(string realm, string id, bool? exact = null, int? first = null, int? max = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Adds the user with the specified id as a member of the organization
        /// </summary>
        /// <remarks>
        /// Adds, or associates, an existing user with the organization. If no user is found, or if it is already associated with the organization, an error response is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MembersPOSTAsync(string realm, string id, string? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns number of members in the organization.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<long> Count2Async(string realm, string id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invites an existing user to the organization, using the specified user id
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InviteExistingUserAsync(string realm, string id, Body? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Invites an existing user or sends a registration link to a new user, based on the provided e-mail address.
        /// </summary>
        /// <remarks>
        /// If the user with the given e-mail address exists, it sends an invitation link, otherwise it sends a registration link.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task InviteUserAsync(string realm, string id, Body2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the member of the organization with the specified id
        /// </summary>
        /// <remarks>
        /// Searches for auser with the given id. If one is found, and is currently a member of the organization, returns it. Otherwise,an error response with status NOT_FOUND is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MemberRepresentation> MembersGETAsync(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Removes the user with the specified id from the organization
        /// </summary>
        /// <remarks>
        /// Breaks the association between the user and organization. The user itself is deleted in case the membership is managed, otherwise the user is not deleted. If no user is found, or if they are not a member of the organization, an error response is returned
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MembersDELETEAsync(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the organizations associated with the user that has the specified id
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<OrganizationRepresentation>> OrganizationsAll3Async(string id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Partial export of existing realm into a JSON file.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PartialExportAsync(string realm, bool? exportClients = null, bool? exportGroupsAndRoles = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Partial import from a JSON file to an existing realm.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task PartialImportAsync(string realm, System.IO.Stream body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Push the realm's revocation policy to any client that has an admin url associated with it.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GlobalRequestResult> PushRevocation2Async(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get all roles for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RolesAll2Async(string realm, bool? briefRepresentation = null, int? first = null, int? max = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new role for the realm or client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RolesPOST2Async(string realm, RoleRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a specific role's representation
        /// </summary>
        /// <param name="role_id">id of role</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleRepresentation> RolesByIdGETAsync(string role_id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the role
        /// </summary>
        /// <param name="role_id">id of role</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RolesByIdPUTAsync(string role_id, string realm, RoleRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the role
        /// </summary>
        /// <param name="role_id">id of role</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RolesByIdDELETEAsync(string role_id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get role's children Returns a set of role's children provided the role is a composite.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositesAll2Async(string role_id, string realm, int? first = null, int? max = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Make the role a composite role by associating some child roles
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompositesPOST2Async(string role_id, string realm, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a set of roles from the role's composite
        /// </summary>
        /// <param name="role_id">Role id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompositesDELETE2Async(string role_id, string realm, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client-level roles for the client that are in the role's composite
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll7Async(string clientUuid, string role_id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that are in the role's composite
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll6Async(string role_id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET5Async(string role_id, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT5Async(string role_id, string realm, ManagementPermissionReference? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<RoleRepresentation> RolesGET2Async(string role_name, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RolesPUT2Async(string role_name, string realm, RoleRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a role by name
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RolesDELETE2Async(string role_name, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get composites of the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> CompositesAll3Async(string role_name, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a composite to the role
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompositesPOST3Async(string role_name, string realm, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove roles from the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CompositesDELETE3Async(string role_name, string realm, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client-level roles for the client that are in the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll8Async(string client_uuid, string role_name, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles of the role's composite
        /// </summary>
        /// <param name="role_name">role's name (not id!)</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll7Async(string role_name, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a stream of groups that have the specified role name
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">if false, return a full representation of the {@code GroupRepresentation} objects.</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> GroupsAll3Async(string role_name, string realm, bool? briefRepresentation = null, int? first = null, int? max = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsGET6Async(string role_name, string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return object stating whether role Authorization permissions have been initialized or not and a reference
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> PermissionsPUT6Async(string role_name, string realm, ManagementPermissionReference? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns a stream of users that have the specified role name.
        /// </summary>
        /// <param name="role_name">the role name.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="first">first result to return. Ignored if negative or {@code null}.</param>
        /// <param name="max">maximum number of results to return. Ignored if negative or {@code null}.</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> UsersAll2Async(string role_name, string realm, bool? briefRepresentation = null, int? first = null, int? max = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a specific user session.
        /// </summary>
        /// <remarks>
        /// Any client that has an admin url will also be told to invalidate this particular session.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SessionsAsync(string session, string realm, bool? isOffline = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Test SMTP connection with current logged in user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task TestSMTPConnectionAsync(string realm, System.Collections.Generic.IDictionary<string, string>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get users Returns a stream of users, filtered according to query parameters.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">Boolean which defines whether brief representations are returned (default: false)</param>
        /// <param name="email">A String contained in email, or the complete email, if param "exact" is true</param>
        /// <param name="emailVerified">whether the email has been verified</param>
        /// <param name="enabled">Boolean representing if user is enabled or not</param>
        /// <param name="exact">Boolean which defines whether the params "last", "first", "email" and "username" must match exactly</param>
        /// <param name="first">Pagination offset</param>
        /// <param name="firstName">A String contained in firstName, or the complete firstName, if param "exact" is true</param>
        /// <param name="idpAlias">The alias of an Identity Provider linked to the user</param>
        /// <param name="idpUserId">The userId at an Identity Provider linked to the user</param>
        /// <param name="lastName">A String contained in lastName, or the complete lastName, if param "exact" is true</param>
        /// <param name="max">Maximum results size (defaults to 100)</param>
        /// <param name="q">A query to search for custom attributes, in the format 'key1:value2 key2:value2'</param>
        /// <param name="search">A String contained in username, first or last name, or email. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.</param>
        /// <param name="username">A String contained in username, or the complete username, if param "exact" is true</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserRepresentation>> UsersAll3Async(string realm, bool? briefRepresentation = null, string? email = null, bool? emailVerified = null, bool? enabled = null, bool? exact = null, int? first = null, string? firstName = null, string? idpAlias = null, string? idpUserId = null, string? lastName = null, int? max = null, string? q = null, string? search = null, string? username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a new user Username must be unique.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersPOSTAsync(string realm, UserRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> UsersManagementPermissionsGETAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<ManagementPermissionReference> UsersManagementPermissionsPUTAsync(string realm, ManagementPermissionReference? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Returns the number of users that match the given criteria.
        /// </summary>
        /// <remarks>
        /// It can be called in three different ways. 1. Don’t specify any criteria and pass {@code null}. The number of all users within that realm will be returned. &lt;p&gt; 2. If {@code search} is specified other criteria such as {@code last} will be ignored even though you set them. The {@code search} string will be matched against the first and last name, the username and the email of a user. &lt;p&gt; 3. If {@code search} is unspecified but any of {@code last}, {@code first}, {@code email} or {@code username} those criteria are matched against their respective fields on a user entity. Combined with a logical and.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="email">email filter</param>
        /// <param name="enabled">Boolean representing if user is enabled or not</param>
        /// <param name="firstName">first name filter</param>
        /// <param name="lastName">last name filter</param>
        /// <param name="search">arbitrary search string for all the fields below. Default search behavior is prefix-based (e.g., foo or foo*). Use *foo* for infix search and "foo" for exact search.</param>
        /// <param name="username">username filter</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<int> Count3Async(string realm, string? email = null, bool? emailVerified = null, bool? enabled = null, string? firstName = null, string? lastName = null, string? q = null, string? search = null, string? username = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get the configuration for the user profile
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UPConfig> ProfileGETAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Set the configuration for the user profile
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UPConfig> ProfilePUTAsync(string realm, UPConfig? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <remarks>
        /// Get the UserProfileMetadata from the configuration
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserProfileMetadata> MetadataAsync(string realm, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get representation of the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="userProfileMetadata">Indicates if the user profile metadata should be added to the response</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<UserRepresentation> UsersGET2Async(string realm, string user_id, bool? userProfileMetadata = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersPUTAsync(string realm, string user_id, UserRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UsersDELETE3Async(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Return credential types, which are provided by the user storage where user is stored.
        /// </summary>
        /// <remarks>
        /// Returned values can contain for example "password", "otp" etc. This will always return empty list for "local" users, which are not backed by any user storage
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<string>> ConfiguredUserStorageCredentialTypesAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get consents granted by the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<System.Collections.Generic.IDictionary<string, object>>> ConsentsAllAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revoke consent and offline tokens for particular client from user
        /// </summary>
        /// <param name="client">Client id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ConsentsAsync(string client, string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<CredentialRepresentation>> CredentialsAllAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a credential for a user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task CredentialsAsync(string credentialId, string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move a credential to a position behind another credential
        /// </summary>
        /// <param name="credentialId">The credential to move</param>
        /// <param name="newPreviousCredentialId">The credential that will be the previous element in the list. If set to null, the moved credential will be the first element in the list.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveAfterAsync(string credentialId, string newPreviousCredentialId, string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Move a credential to a first position in the credentials list of the user
        /// </summary>
        /// <param name="credentialId">The credential to move</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task MoveToFirstAsync(string credentialId, string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a credential label for a user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task UserLabelAsync(string credentialId, string realm, string user_id, string? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Disable all credentials for a user of a specific type
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task DisableCredentialTypesAsync(string realm, string user_id, System.Collections.Generic.IEnumerable<string>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send an email to the user with a link they can click to execute particular actions.
        /// </summary>
        /// <remarks>
        /// An email contains a link the user can click to perform a set of required actions. The redirectUri and clientId parameters are optional. If no redirect is given, then there will be no link back to click after actions have completed. Redirect uri must be a valid uri for the particular clientId.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">Client id</param>
        /// <param name="lifespan">Number of seconds after which the generated token expires</param>
        /// <param name="redirect_uri">Redirect uri</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ExecuteActionsEmailAsync(string realm, string user_id, string? client_id = null, int? lifespan = null, string? redirect_uri = null, System.Collections.Generic.IEnumerable<string>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get social logins associated with the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<FederatedIdentityRepresentation>> FederatedIdentityAllAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a social login provider to the user
        /// </summary>
        /// <param name="provider">Social login provider id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FederatedIdentityPOSTAsync(string provider, string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a social login provider from user
        /// </summary>
        /// <param name="provider">Social login provider id</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task FederatedIdentityDELETEAsync(string provider, string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GroupRepresentation>> GroupsAll4Async(string realm, string user_id, bool? briefRepresentation = null, int? first = null, int? max = null, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, long>> Count4Async(string realm, string user_id, string? search = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GroupsPUT2Async(string groupId, string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task GroupsDELETE2Async(string groupId, string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Impersonate the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, object>> ImpersonationAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove all user sessions associated with the user Also send notification to all clients that have an admin URL to invalidate the sessions for the particular user.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task LogoutAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get offline sessions associated with the user and client
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> OfflineSessions2Async(string clientUuid, string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Set up a new password for the user.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ResetPasswordAsync(string realm, string user_id, CredentialRepresentation? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send an email to the user with a link they can click to reset their password.
        /// </summary>
        /// <remarks>
        /// The redirectUri and clientId parameters are optional. The default for the redirect is the account client. This endpoint has been deprecated.  Please use the execute-actions-email passing a list with UPDATE_PASSWORD within it.
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id</param>
        /// <param name="redirect_uri">redirect uri</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task ResetPasswordEmailAsync(string realm, string user_id, string? client_id = null, string? redirect_uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MappingsRepresentation> RoleMappings2Async(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get client-level role mappings for the user or group, and the app
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> ClientsAll9Async(string realm, string user_id, string client_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add client-level roles to the user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsPOST6Async(string realm, string user_id, string client_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete client-level roles from user or group role mapping
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task ClientsDELETE6Async(string realm, string user_id, string client_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get available client-level roles that can be mapped to the user or group
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available9Async(string realm, string user_id, string client_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective client-level role mappings This recurses any composite roles
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">client id (not clientId!)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite9Async(string realm, string user_id, string client_id, bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> RealmAll8Async(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add realm-level role mappings to the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmPOST5Async(string realm, string user_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete realm-level role mappings
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>No Content</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task RealmDELETE5Async(string realm, string user_id, System.Collections.Generic.IEnumerable<RoleRepresentation>? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get realm-level roles that can be mapped
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Available10Async(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get effective realm-level role mappings This will recurse all composite roles to get the result.
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="briefRepresentation">if false, return roles with their attributes</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<RoleRepresentation>> Composite10Async(string realm, string user_id, bool? briefRepresentation = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Send an email-verification email to the user An email contains a link the user can click to verify their email address.
        /// </summary>
        /// <remarks>
        /// The redirectUri, clientId and lifespan parameters are optional. The default for the redirect is the account client. The default for the lifespan is 12 hours
        /// </remarks>
        /// <param name="realm">realm name (not id!)</param>
        /// <param name="client_id">Client id</param>
        /// <param name="lifespan">Number of seconds after which the generated token expires</param>
        /// <param name="redirect_uri">Redirect uri</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task SendVerifyEmailAsync(string realm, string user_id, string? client_id = null, int? lifespan = null, string? redirect_uri = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get sessions associated with the user
        /// </summary>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.ICollection<UserSessionRepresentation>> SessionsAllAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="realm">realm name (not id!)</param>
        /// <returns>OK</returns>
        /// <exception cref="KeycloakGeneratedApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>> UnmanagedAttributesAsync(string realm, string user_id, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AbstractPolicyRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policies")]
        public System.Collections.Generic.ICollection<string>? Policies { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resources")]
        public System.Collections.Generic.ICollection<string>? Resources { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<string>? Scopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("logic")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Logic? Logic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("decisionStrategy")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DecisionStrategy? DecisionStrategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public string? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resourcesData")]
        public System.Collections.Generic.ICollection<ResourceRepresentation>? ResourcesData { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopesData")]
        public System.Collections.Generic.ICollection<ScopeRepresentation>? ScopesData { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AbstractPolicyRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AbstractPolicyRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Access
    {

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        public System.Collections.Generic.ICollection<string>? Roles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("verify_caller")]
        public bool? Verify_caller { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Access FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Access>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AccessToken
    {

        [System.Text.Json.Serialization.JsonPropertyName("jti")]
        public string? Jti { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exp")]
        public long? Exp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nbf")]
        public long? Nbf { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iat")]
        public long? Iat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iss")]
        public string? Iss { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sub")]
        public string? Sub { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("typ")]
        public string? Typ { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("azp")]
        public string? Azp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherClaims")]
        public System.Collections.Generic.IDictionary<string, object>? OtherClaims { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonce")]
        public string? Nonce { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("auth_time")]
        public long? Auth_time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sid")]
        public string? Sid { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("at_hash")]
        public string? At_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("c_hash")]
        public string? C_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("given_name")]
        public string? Given_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("family_name")]
        public string? Family_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("middle_name")]
        public string? Middle_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nickname")]
        public string? Nickname { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("preferred_username")]
        public string? Preferred_username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("profile")]
        public string? Profile { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("picture")]
        public string? Picture { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string? Website { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email_verified")]
        public bool? Email_verified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string? Gender { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("birthdate")]
        public string? Birthdate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("zoneinfo")]
        public string? Zoneinfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locale")]
        public string? Locale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone_number")]
        public string? Phone_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone_number_verified")]
        public bool? Phone_number_verified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public AddressClaimSet? Address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public long? Updated_at { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("claims_locales")]
        public string? Claims_locales { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acr")]
        public string? Acr { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("s_hash")]
        public string? S_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trusted-certs")]
        public System.Collections.Generic.ICollection<string>? TrustedCerts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allowed-origins")]
        public System.Collections.Generic.ICollection<string>? AllowedOrigins { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realm_access")]
        public Access? Realm_access { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resource_access")]
        public System.Collections.Generic.IDictionary<string, Access>? Resource_access { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorization")]
        public Authorization? Authorization { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("cnf")]
        public Confirmation? Cnf { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scope")]
        public string? Scope { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AccessToken FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AccessToken>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AddressClaimSet
    {

        [System.Text.Json.Serialization.JsonPropertyName("formatted")]
        public string? Formatted { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("street_address")]
        public string? Street_address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locality")]
        public string? Locality { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("region")]
        public string? Region { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postal_code")]
        public string? Postal_code { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AddressClaimSet FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AddressClaimSet>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AdminEventRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        public long? Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realmId")]
        public string? RealmId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authDetails")]
        public AuthDetailsRepresentation? AuthDetails { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("operationType")]
        public string? OperationType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resourceType")]
        public string? ResourceType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resourcePath")]
        public string? ResourcePath { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("representation")]
        public string? Representation { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string? Error { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AdminEventRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AdminEventRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class ApplicationRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public string? ClientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rootUrl")]
        public string? RootUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adminUrl")]
        public string? AdminUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("baseUrl")]
        public string? BaseUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("surrogateAuthRequired")]
        public bool? SurrogateAuthRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alwaysDisplayInConsole")]
        public bool? AlwaysDisplayInConsole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientAuthenticatorType")]
        public string? ClientAuthenticatorType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secret")]
        public string? Secret { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationAccessToken")]
        public string? RegistrationAccessToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultRoles")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<string>? DefaultRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("redirectUris")]
        public System.Collections.Generic.ICollection<string>? RedirectUris { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webOrigins")]
        public System.Collections.Generic.ICollection<string>? WebOrigins { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notBefore")]
        public int? NotBefore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bearerOnly")]
        public bool? BearerOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consentRequired")]
        public bool? ConsentRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("standardFlowEnabled")]
        public bool? StandardFlowEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("implicitFlowEnabled")]
        public bool? ImplicitFlowEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("directAccessGrantsEnabled")]
        public bool? DirectAccessGrantsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceAccountsEnabled")]
        public bool? ServiceAccountsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorizationServicesEnabled")]
        public bool? AuthorizationServicesEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("directGrantsOnly")]
        [System.Obsolete]
        public bool? DirectGrantsOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicClient")]
        public bool? PublicClient { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frontchannelLogout")]
        public bool? FrontchannelLogout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        public string? Protocol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, string>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticationFlowBindingOverrides")]
        public System.Collections.Generic.IDictionary<string, string>? AuthenticationFlowBindingOverrides { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fullScopeAllowed")]
        public bool? FullScopeAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nodeReRegistrationTimeout")]
        public int? NodeReRegistrationTimeout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registeredNodes")]
        public System.Collections.Generic.IDictionary<string, int>? RegisteredNodes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolMappers")]
        public System.Collections.Generic.ICollection<ProtocolMapperRepresentation>? ProtocolMappers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientTemplate")]
        [System.Obsolete]
        public string? ClientTemplate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useTemplateConfig")]
        [System.Obsolete]
        public bool? UseTemplateConfig { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useTemplateScope")]
        [System.Obsolete]
        public bool? UseTemplateScope { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useTemplateMappers")]
        [System.Obsolete]
        public bool? UseTemplateMappers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultClientScopes")]
        public System.Collections.Generic.ICollection<string>? DefaultClientScopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("optionalClientScopes")]
        public System.Collections.Generic.ICollection<string>? OptionalClientScopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorizationSettings")]
        public ResourceServerRepresentation? AuthorizationSettings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        public System.Collections.Generic.IDictionary<string, bool>? Access { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("origin")]
        public string? Origin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("claims")]
        [System.Obsolete]
        public Claims? Claims { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ApplicationRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ApplicationRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthDetailsRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("realmId")]
        public string? RealmId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public string? ClientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipAddress")]
        public string? IpAddress { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AuthDetailsRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AuthDetailsRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthenticationExecutionExportRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("authenticatorConfig")]
        public string? AuthenticatorConfig { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticator")]
        public string? Authenticator { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticatorFlow")]
        public bool? AuthenticatorFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requirement")]
        public string? Requirement { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int? Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("autheticatorFlow")]
        [System.Obsolete]
        public bool? AutheticatorFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flowAlias")]
        public string? FlowAlias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userSetupAllowed")]
        public bool? UserSetupAllowed { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AuthenticationExecutionExportRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AuthenticationExecutionExportRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthenticationExecutionInfoRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requirement")]
        public string? Requirement { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alias")]
        public string? Alias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requirementChoices")]
        public System.Collections.Generic.ICollection<string>? RequirementChoices { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("configurable")]
        public bool? Configurable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticationFlow")]
        public bool? AuthenticationFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providerId")]
        public string? ProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticationConfig")]
        public string? AuthenticationConfig { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flowId")]
        public string? FlowId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("level")]
        public int? Level { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("index")]
        public int? Index { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int? Priority { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AuthenticationExecutionInfoRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AuthenticationExecutionInfoRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthenticationExecutionRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("authenticatorConfig")]
        public string? AuthenticatorConfig { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticator")]
        public string? Authenticator { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticatorFlow")]
        public bool? AuthenticatorFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requirement")]
        public string? Requirement { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int? Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("autheticatorFlow")]
        [System.Obsolete]
        public bool? AutheticatorFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("flowId")]
        public string? FlowId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentFlow")]
        public string? ParentFlow { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AuthenticationExecutionRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AuthenticationExecutionRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthenticationFlowRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alias")]
        public string? Alias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providerId")]
        public string? ProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("topLevel")]
        public bool? TopLevel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("builtIn")]
        public bool? BuiltIn { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticationExecutions")]
        public System.Collections.Generic.ICollection<AuthenticationExecutionExportRepresentation>? AuthenticationExecutions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AuthenticationFlowRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AuthenticationFlowRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthenticatorConfigInfoRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providerId")]
        public string? ProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("helpText")]
        public string? HelpText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public System.Collections.Generic.ICollection<ConfigPropertyRepresentation>? Properties { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AuthenticatorConfigInfoRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AuthenticatorConfigInfoRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class AuthenticatorConfigRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alias")]
        public string? Alias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, string>? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static AuthenticatorConfigRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<AuthenticatorConfigRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Authorization
    {

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        public System.Collections.Generic.ICollection<Permission>? Permissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Authorization FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Authorization>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum BruteForceStrategy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"LINEAR")]
        LINEAR = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MULTIPLE")]
        MULTIPLE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CertificateRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("privateKey")]
        public string? PrivateKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicKey")]
        public string? PublicKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificate")]
        public string? Certificate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string? Kid { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CertificateRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CertificateRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClaimRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public bool? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public bool? Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("profile")]
        public bool? Profile { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("picture")]
        public bool? Picture { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public bool? Website { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public bool? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public bool? Gender { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locale")]
        public bool? Locale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public bool? Address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone")]
        public bool? Phone { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClaimRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClaimRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientInitialAccessCreatePresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public int? Expiration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientInitialAccessCreatePresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientInitialAccessCreatePresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientInitialAccessPresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("token")]
        public string? Token { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        public int? Timestamp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("expiration")]
        public int? Expiration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("remainingCount")]
        public int? RemainingCount { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientInitialAccessPresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientInitialAccessPresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientMappingsRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("client")]
        public string? Client { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mappings")]
        public System.Collections.Generic.ICollection<RoleRepresentation>? Mappings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientMappingsRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientMappingsRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientPoliciesRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("policies")]
        public System.Collections.Generic.ICollection<ClientPolicyRepresentation>? Policies { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("globalPolicies")]
        public System.Collections.Generic.ICollection<ClientPolicyRepresentation>? GlobalPolicies { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientPoliciesRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientPoliciesRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientPolicyConditionRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("condition")]
        public string? Condition { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("configuration")]
        public System.Collections.Generic.ICollection<object>? Configuration { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientPolicyConditionRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientPolicyConditionRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientPolicyExecutorRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("executor")]
        public string? Executor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("configuration")]
        public System.Collections.Generic.ICollection<object>? Configuration { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientPolicyExecutorRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientPolicyExecutorRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientPolicyRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("conditions")]
        public System.Collections.Generic.ICollection<ClientPolicyConditionRepresentation>? Conditions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("profiles")]
        public System.Collections.Generic.ICollection<string>? Profiles { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientPolicyRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientPolicyRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientProfileRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("executors")]
        public System.Collections.Generic.ICollection<ClientPolicyExecutorRepresentation>? Executors { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientProfileRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientProfileRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientProfilesRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("profiles")]
        public System.Collections.Generic.ICollection<ClientProfileRepresentation>? Profiles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("globalProfiles")]
        public System.Collections.Generic.ICollection<ClientProfileRepresentation>? GlobalProfiles { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientProfilesRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientProfilesRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public string? ClientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rootUrl")]
        public string? RootUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adminUrl")]
        public string? AdminUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("baseUrl")]
        public string? BaseUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("surrogateAuthRequired")]
        public bool? SurrogateAuthRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alwaysDisplayInConsole")]
        public bool? AlwaysDisplayInConsole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientAuthenticatorType")]
        public string? ClientAuthenticatorType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secret")]
        public string? Secret { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationAccessToken")]
        public string? RegistrationAccessToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultRoles")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<string>? DefaultRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("redirectUris")]
        public System.Collections.Generic.ICollection<string>? RedirectUris { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webOrigins")]
        public System.Collections.Generic.ICollection<string>? WebOrigins { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notBefore")]
        public int? NotBefore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bearerOnly")]
        public bool? BearerOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consentRequired")]
        public bool? ConsentRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("standardFlowEnabled")]
        public bool? StandardFlowEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("implicitFlowEnabled")]
        public bool? ImplicitFlowEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("directAccessGrantsEnabled")]
        public bool? DirectAccessGrantsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceAccountsEnabled")]
        public bool? ServiceAccountsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorizationServicesEnabled")]
        public bool? AuthorizationServicesEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("directGrantsOnly")]
        [System.Obsolete]
        public bool? DirectGrantsOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicClient")]
        public bool? PublicClient { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frontchannelLogout")]
        public bool? FrontchannelLogout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        public string? Protocol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, string>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticationFlowBindingOverrides")]
        public System.Collections.Generic.IDictionary<string, string>? AuthenticationFlowBindingOverrides { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fullScopeAllowed")]
        public bool? FullScopeAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nodeReRegistrationTimeout")]
        public int? NodeReRegistrationTimeout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registeredNodes")]
        public System.Collections.Generic.IDictionary<string, int>? RegisteredNodes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolMappers")]
        public System.Collections.Generic.ICollection<ProtocolMapperRepresentation>? ProtocolMappers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientTemplate")]
        [System.Obsolete]
        public string? ClientTemplate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useTemplateConfig")]
        [System.Obsolete]
        public bool? UseTemplateConfig { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useTemplateScope")]
        [System.Obsolete]
        public bool? UseTemplateScope { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useTemplateMappers")]
        [System.Obsolete]
        public bool? UseTemplateMappers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultClientScopes")]
        public System.Collections.Generic.ICollection<string>? DefaultClientScopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("optionalClientScopes")]
        public System.Collections.Generic.ICollection<string>? OptionalClientScopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorizationSettings")]
        public ResourceServerRepresentation? AuthorizationSettings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        public System.Collections.Generic.IDictionary<string, bool>? Access { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("origin")]
        public string? Origin { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientScopeRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        public string? Protocol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, string>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolMappers")]
        public System.Collections.Generic.ICollection<ProtocolMapperRepresentation>? ProtocolMappers { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientScopeRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientScopeRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class ClientTemplateRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        public string? Protocol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fullScopeAllowed")]
        public bool? FullScopeAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bearerOnly")]
        public bool? BearerOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consentRequired")]
        public bool? ConsentRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("standardFlowEnabled")]
        public bool? StandardFlowEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("implicitFlowEnabled")]
        public bool? ImplicitFlowEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("directAccessGrantsEnabled")]
        public bool? DirectAccessGrantsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceAccountsEnabled")]
        public bool? ServiceAccountsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicClient")]
        public bool? PublicClient { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frontchannelLogout")]
        public bool? FrontchannelLogout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, string>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolMappers")]
        public System.Collections.Generic.ICollection<ProtocolMapperRepresentation>? ProtocolMappers { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientTemplateRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientTemplateRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientTypeRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("provider")]
        public string? Provider { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parent")]
        public string? Parent { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, PropertyConfig>? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientTypeRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientTypeRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ClientTypesRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("client-types")]
        public System.Collections.Generic.ICollection<ClientTypeRepresentation>? ClientTypes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("global-client-types")]
        public System.Collections.Generic.ICollection<ClientTypeRepresentation>? GlobalClientTypes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ClientTypesRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ClientTypesRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentExportRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providerId")]
        public string? ProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subType")]
        public string? SubType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subComponents")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ComponentExportRepresentation>>? SubComponents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ComponentExportRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ComponentExportRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providerId")]
        public string? ProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providerType")]
        public string? ProviderType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string? ParentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subType")]
        public string? SubType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ComponentRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ComponentRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ComponentTypeRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("helpText")]
        public string? HelpText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public System.Collections.Generic.ICollection<ConfigPropertyRepresentation>? Properties { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("metadata")]
        public System.Collections.Generic.IDictionary<string, object>? Metadata { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ComponentTypeRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ComponentTypeRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Composites
    {

        [System.Text.Json.Serialization.JsonPropertyName("realm")]
        public System.Collections.Generic.ICollection<string>? Realm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("client")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Client { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("application")]
        [System.Obsolete]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Application { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Composites FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Composites>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ConfigPropertyRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("label")]
        public string? Label { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("helpText")]
        public string? HelpText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultValue")]
        public object? DefaultValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("options")]
        public System.Collections.Generic.ICollection<string>? Options { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secret")]
        public bool? Secret { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public bool? Required { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("readOnly")]
        public bool? ReadOnly { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ConfigPropertyRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ConfigPropertyRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Confirmation
    {

        [System.Text.Json.Serialization.JsonPropertyName("x5t#S256")]
        public string? X5t_S256 { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("jkt")]
        public string? Jkt { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Confirmation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Confirmation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class CredentialRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userLabel")]
        public string? UserLabel { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public long? CreatedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secretData")]
        public string? SecretData { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("credentialData")]
        public string? CredentialData { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int? Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public string? Value { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("temporary")]
        public bool? Temporary { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("device")]
        [System.Obsolete]
        public string? Device { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hashedSaltedValue")]
        [System.Obsolete]
        public string? HashedSaltedValue { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("salt")]
        [System.Obsolete]
        public string? Salt { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hashIterations")]
        [System.Obsolete]
        public int? HashIterations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("counter")]
        [System.Obsolete]
        public int? Counter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("algorithm")]
        [System.Obsolete]
        public string? Algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("digits")]
        [System.Obsolete]
        public int? Digits { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("period")]
        [System.Obsolete]
        public int? Period { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        [System.Obsolete]
        public Config? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static CredentialRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<CredentialRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum DecisionEffect
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PERMIT")]
        PERMIT = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"DENY")]
        DENY = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum DecisionStrategy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"AFFIRMATIVE")]
        AFFIRMATIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"UNANIMOUS")]
        UNANIMOUS = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"CONSENSUS")]
        CONSENSUS = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum EnforcementMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"PERMISSIVE")]
        PERMISSIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ENFORCING")]
        ENFORCING = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EvaluationResultRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public ResourceRepresentation? Resource { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<ScopeRepresentation>? Scopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policies")]
        public System.Collections.Generic.ICollection<PolicyResultRepresentation>? Policies { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DecisionEffect? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allowedScopes")]
        public System.Collections.Generic.ICollection<ScopeRepresentation>? AllowedScopes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EvaluationResultRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<EvaluationResultRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class EventRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("time")]
        public long? Time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realmId")]
        public string? RealmId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public string? ClientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sessionId")]
        public string? SessionId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipAddress")]
        public string? IpAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("error")]
        public string? Error { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("details")]
        public System.Collections.Generic.IDictionary<string, string>? Details { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static EventRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<EventRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FederatedIdentityRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("identityProvider")]
        public string? IdentityProvider { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userName")]
        public string? UserName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static FederatedIdentityRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<FederatedIdentityRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GlobalRequestResult
    {

        [System.Text.Json.Serialization.JsonPropertyName("successRequests")]
        public System.Collections.Generic.ICollection<string>? SuccessRequests { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("failedRequests")]
        public System.Collections.Generic.ICollection<string>? FailedRequests { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GlobalRequestResult FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GlobalRequestResult>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class GroupRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("parentId")]
        public string? ParentId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subGroupCount")]
        public long? SubGroupCount { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("subGroups")]
        public System.Collections.Generic.ICollection<GroupRepresentation>? SubGroups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realmRoles")]
        public System.Collections.Generic.ICollection<string>? RealmRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientRoles")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? ClientRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        public System.Collections.Generic.IDictionary<string, bool>? Access { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static GroupRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<GroupRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IDToken
    {

        [System.Text.Json.Serialization.JsonPropertyName("jti")]
        public string? Jti { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("exp")]
        public long? Exp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nbf")]
        public long? Nbf { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iat")]
        public long? Iat { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iss")]
        public string? Iss { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sub")]
        public string? Sub { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("typ")]
        public string? Typ { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("azp")]
        public string? Azp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otherClaims")]
        public System.Collections.Generic.IDictionary<string, object>? OtherClaims { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nonce")]
        public string? Nonce { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("auth_time")]
        public long? Auth_time { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sid")]
        public string? Sid { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("at_hash")]
        public string? At_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("c_hash")]
        public string? C_hash { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("given_name")]
        public string? Given_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("family_name")]
        public string? Family_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("middle_name")]
        public string? Middle_name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nickname")]
        public string? Nickname { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("preferred_username")]
        public string? Preferred_username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("profile")]
        public string? Profile { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("picture")]
        public string? Picture { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("website")]
        public string? Website { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email_verified")]
        public bool? Email_verified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("gender")]
        public string? Gender { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("birthdate")]
        public string? Birthdate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("zoneinfo")]
        public string? Zoneinfo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("locale")]
        public string? Locale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone_number")]
        public string? Phone_number { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("phone_number_verified")]
        public bool? Phone_number_verified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public AddressClaimSet? Address { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updated_at")]
        public long? Updated_at { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("claims_locales")]
        public string? Claims_locales { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("acr")]
        public string? Acr { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("s_hash")]
        public string? S_hash { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IDToken FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IDToken>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityProviderMapperRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identityProviderAlias")]
        public string? IdentityProviderAlias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identityProviderMapper")]
        public string? IdentityProviderMapper { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, string>? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IdentityProviderMapperRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IdentityProviderMapperRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityProviderMapperTypeRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("category")]
        public string? Category { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("helpText")]
        public string? HelpText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public System.Collections.Generic.ICollection<ConfigPropertyRepresentation>? Properties { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IdentityProviderMapperTypeRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IdentityProviderMapperTypeRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class IdentityProviderRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("alias")]
        public string? Alias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internalId")]
        public string? InternalId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providerId")]
        public string? ProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updateProfileFirstLoginMode")]
        [System.Obsolete]
        public string? UpdateProfileFirstLoginMode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("trustEmail")]
        public bool? TrustEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storeToken")]
        public bool? StoreToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("addReadTokenRoleOnCreate")]
        public bool? AddReadTokenRoleOnCreate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticateByDefault")]
        public bool? AuthenticateByDefault { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("linkOnly")]
        public bool? LinkOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("hideOnLogin")]
        public bool? HideOnLogin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstBrokerLoginFlowAlias")]
        public string? FirstBrokerLoginFlowAlias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("postBrokerLoginFlowAlias")]
        public string? PostBrokerLoginFlowAlias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("organizationId")]
        public string? OrganizationId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, string>? Config { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updateProfileFirstLogin")]
        [System.Obsolete]
        public bool? UpdateProfileFirstLogin { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static IdentityProviderRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<IdentityProviderRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class InstallationAdapterConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("realm")]
        public string? Realm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realm-public-key")]
        public string? RealmPublicKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("auth-server-url")]
        public string? AuthServerUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ssl-required")]
        public string? SslRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bearer-only")]
        public bool? BearerOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public string? Resource { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("public-client")]
        public bool? PublicClient { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("verify-token-audience")]
        public bool? VerifyTokenAudience { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("credentials")]
        public System.Collections.Generic.IDictionary<string, object>? Credentials { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("use-resource-role-mappings")]
        public bool? UseResourceRoleMappings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("confidential-port")]
        public int? ConfidentialPort { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policy-enforcer")]
        public PolicyEnforcerConfig? PolicyEnforcer { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static InstallationAdapterConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<InstallationAdapterConfig>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyMetadataRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("providerId")]
        public string? ProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providerPriority")]
        public long? ProviderPriority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("kid")]
        public string? Kid { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("algorithm")]
        public string? Algorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicKey")]
        public string? PublicKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificate")]
        public string? Certificate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("use")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public KeyUse? Use { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public long? ValidTo { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static KeyMetadataRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<KeyMetadataRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeyStoreConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("realmCertificate")]
        public bool? RealmCertificate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("storePassword")]
        public string? StorePassword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyPassword")]
        public string? KeyPassword { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keyAlias")]
        public string? KeyAlias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realmAlias")]
        public string? RealmAlias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("format")]
        public string? Format { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static KeyStoreConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<KeyStoreConfig>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum KeyUse
    {

        [System.Runtime.Serialization.EnumMember(Value = @"SIG")]
        SIG = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ENC")]
        ENC = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeysMetadataRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("active")]
        public System.Collections.Generic.IDictionary<string, string>? Active { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keys")]
        public System.Collections.Generic.ICollection<KeyMetadataRepresentation>? Keys { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static KeysMetadataRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<KeysMetadataRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum Logic
    {

        [System.Runtime.Serialization.EnumMember(Value = @"POSITIVE")]
        POSITIVE = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"NEGATIVE")]
        NEGATIVE = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ManagementPermissionReference
    {

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public string? Resource { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopePermissions")]
        public System.Collections.Generic.IDictionary<string, string>? ScopePermissions { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ManagementPermissionReference FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ManagementPermissionReference>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MappingsRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("realmMappings")]
        public System.Collections.Generic.ICollection<RoleRepresentation>? RealmMappings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientMappings")]
        public System.Collections.Generic.IDictionary<string, ClientMappingsRepresentation>? ClientMappings { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MappingsRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MappingsRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MemberRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string? Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("emailVerified")]
        public bool? EmailVerified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userProfileMetadata")]
        public UserProfileMetadata? UserProfileMetadata { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("self")]
        public string? Self { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("origin")]
        public string? Origin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdTimestamp")]
        public long? CreatedTimestamp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totp")]
        public bool? Totp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("federationLink")]
        public string? FederationLink { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceAccountClientId")]
        public string? ServiceAccountClientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("credentials")]
        public System.Collections.Generic.ICollection<CredentialRepresentation>? Credentials { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("disableableCredentialTypes")]
        public System.Collections.Generic.ICollection<string>? DisableableCredentialTypes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiredActions")]
        public System.Collections.Generic.ICollection<string>? RequiredActions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("federatedIdentities")]
        public System.Collections.Generic.ICollection<FederatedIdentityRepresentation>? FederatedIdentities { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realmRoles")]
        public System.Collections.Generic.ICollection<string>? RealmRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientRoles")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? ClientRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientConsents")]
        public System.Collections.Generic.ICollection<UserConsentRepresentation>? ClientConsents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notBefore")]
        public int? NotBefore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationRoles")]
        [System.Obsolete]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? ApplicationRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("socialLinks")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<SocialLinkRepresentation>? SocialLinks { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<string>? Groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        public System.Collections.Generic.IDictionary<string, bool>? Access { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("membershipType")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public MembershipType? MembershipType { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MemberRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MemberRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum MembershipType
    {

        [System.Runtime.Serialization.EnumMember(Value = @"UNMANAGED")]
        UNMANAGED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"MANAGED")]
        MANAGED = 2,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class MethodConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("method")]
        public string? Method { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<string>? Scopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes-enforcement-mode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public ScopeEnforcementMode? ScopesEnforcementMode { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static MethodConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<MethodConfig>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class OAuthClientRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public string? ClientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rootUrl")]
        public string? RootUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adminUrl")]
        public string? AdminUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("baseUrl")]
        public string? BaseUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("surrogateAuthRequired")]
        public bool? SurrogateAuthRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alwaysDisplayInConsole")]
        public bool? AlwaysDisplayInConsole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientAuthenticatorType")]
        public string? ClientAuthenticatorType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("secret")]
        public string? Secret { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationAccessToken")]
        public string? RegistrationAccessToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultRoles")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<string>? DefaultRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("redirectUris")]
        public System.Collections.Generic.ICollection<string>? RedirectUris { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webOrigins")]
        public System.Collections.Generic.ICollection<string>? WebOrigins { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notBefore")]
        public int? NotBefore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bearerOnly")]
        public bool? BearerOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consentRequired")]
        public bool? ConsentRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("standardFlowEnabled")]
        public bool? StandardFlowEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("implicitFlowEnabled")]
        public bool? ImplicitFlowEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("directAccessGrantsEnabled")]
        public bool? DirectAccessGrantsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceAccountsEnabled")]
        public bool? ServiceAccountsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorizationServicesEnabled")]
        public bool? AuthorizationServicesEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("directGrantsOnly")]
        [System.Obsolete]
        public bool? DirectGrantsOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicClient")]
        public bool? PublicClient { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("frontchannelLogout")]
        public bool? FrontchannelLogout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        public string? Protocol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, string>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticationFlowBindingOverrides")]
        public System.Collections.Generic.IDictionary<string, string>? AuthenticationFlowBindingOverrides { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fullScopeAllowed")]
        public bool? FullScopeAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("nodeReRegistrationTimeout")]
        public int? NodeReRegistrationTimeout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registeredNodes")]
        public System.Collections.Generic.IDictionary<string, int>? RegisteredNodes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolMappers")]
        public System.Collections.Generic.ICollection<ProtocolMapperRepresentation>? ProtocolMappers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientTemplate")]
        [System.Obsolete]
        public string? ClientTemplate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useTemplateConfig")]
        [System.Obsolete]
        public bool? UseTemplateConfig { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useTemplateScope")]
        [System.Obsolete]
        public bool? UseTemplateScope { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("useTemplateMappers")]
        [System.Obsolete]
        public bool? UseTemplateMappers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultClientScopes")]
        public System.Collections.Generic.ICollection<string>? DefaultClientScopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("optionalClientScopes")]
        public System.Collections.Generic.ICollection<string>? OptionalClientScopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authorizationSettings")]
        public ResourceServerRepresentation? AuthorizationSettings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        public System.Collections.Generic.IDictionary<string, bool>? Access { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("origin")]
        public string? Origin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("claims")]
        [System.Obsolete]
        public Claims2? Claims { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OAuthClientRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OAuthClientRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationDomainRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("verified")]
        public bool? Verified { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OrganizationDomainRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OrganizationDomainRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class OrganizationRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("alias")]
        public string? Alias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("redirectUrl")]
        public string? RedirectUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("domains")]
        public System.Collections.Generic.ICollection<OrganizationDomainRepresentation>? Domains { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("members")]
        public System.Collections.Generic.ICollection<MemberRepresentation>? Members { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identityProviders")]
        public System.Collections.Generic.ICollection<IdentityProviderRepresentation>? IdentityProviders { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static OrganizationRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<OrganizationRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PathCacheConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("max-entries")]
        public int? MaxEntries { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lifespan")]
        public long? Lifespan { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PathCacheConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PathCacheConfig>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PathConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("path")]
        public string? Path { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("methods")]
        public System.Collections.Generic.ICollection<MethodConfig>? Methods { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<string>? Scopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enforcement-mode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EnforcementMode? EnforcementMode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("claim-information-point")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, object>>? ClaimInformationPoint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("invalidated")]
        public bool? Invalidated { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("staticPath")]
        public bool? StaticPath { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("static")]
        public bool? Static { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PathConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PathConfig>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Permission
    {

        [System.Text.Json.Serialization.JsonPropertyName("rsid")]
        public string? Rsid { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rsname")]
        public string? Rsname { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<string>? Scopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("claims")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Claims { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Permission FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Permission>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum PolicyEnforcementMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENFORCING")]
        ENFORCING = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"PERMISSIVE")]
        PERMISSIVE = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyEnforcerConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("enforcement-mode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public EnforcementMode? EnforcementMode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("paths")]
        public System.Collections.Generic.ICollection<PathConfig>? Paths { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("path-cache")]
        public PathCacheConfig? PathCache { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lazy-load-paths")]
        public bool? LazyLoadPaths { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("on-deny-redirect-to")]
        public string? OnDenyRedirectTo { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("user-managed-access")]
        public object? UserManagedAccess { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("claim-information-point")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, object>>? ClaimInformationPoint { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("http-method-as-scope")]
        public bool? HttpMethodAsScope { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realm")]
        public string? Realm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("auth-server-url")]
        public string? AuthServerUrl { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("credentials")]
        public System.Collections.Generic.IDictionary<string, object>? Credentials { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resource")]
        public string? Resource { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PolicyEnforcerConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PolicyEnforcerConfig>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyEvaluationRequest
    {

        [System.Text.Json.Serialization.JsonPropertyName("context")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, string>>? Context { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resources")]
        public System.Collections.Generic.ICollection<ResourceRepresentation>? Resources { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public string? ClientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roleIds")]
        public System.Collections.Generic.ICollection<string>? RoleIds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("entitlements")]
        public bool? Entitlements { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PolicyEvaluationRequest FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PolicyEvaluationRequest>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyEvaluationResponse
    {

        [System.Text.Json.Serialization.JsonPropertyName("results")]
        public System.Collections.Generic.ICollection<EvaluationResultRepresentation>? Results { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("entitlements")]
        public bool? Entitlements { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DecisionEffect? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rpt")]
        public AccessToken? Rpt { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PolicyEvaluationResponse FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PolicyEvaluationResponse>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyProviderRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public string? Group { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PolicyProviderRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PolicyProviderRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policies")]
        public System.Collections.Generic.ICollection<string>? Policies { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resources")]
        public System.Collections.Generic.ICollection<string>? Resources { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<string>? Scopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("logic")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public Logic? Logic { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("decisionStrategy")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DecisionStrategy? DecisionStrategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public string? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resourcesData")]
        public System.Collections.Generic.ICollection<ResourceRepresentation>? ResourcesData { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopesData")]
        public System.Collections.Generic.ICollection<ScopeRepresentation>? ScopesData { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, string>? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PolicyRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PolicyRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PolicyResultRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("policy")]
        public PolicyRepresentation? Policy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("status")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DecisionEffect? Status { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("associatedPolicies")]
        public System.Collections.Generic.ICollection<PolicyResultRepresentation>? AssociatedPolicies { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<string>? Scopes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PolicyResultRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PolicyResultRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PropertyConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("applicable")]
        public bool? Applicable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("value")]
        public object? Value { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PropertyConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PropertyConfig>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProtocolMapperEvaluationRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("mapperId")]
        public string? MapperId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("mapperName")]
        public string? MapperName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containerId")]
        public string? ContainerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containerName")]
        public string? ContainerName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containerType")]
        public string? ContainerType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolMapper")]
        public string? ProtocolMapper { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ProtocolMapperEvaluationRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ProtocolMapperEvaluationRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ProtocolMapperRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocol")]
        public string? Protocol { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolMapper")]
        public string? ProtocolMapper { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consentRequired")]
        [System.Obsolete]
        public bool? ConsentRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("consentText")]
        [System.Obsolete]
        public string? ConsentText { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, string>? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ProtocolMapperRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ProtocolMapperRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class PublishedRealmRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("realm")]
        public string? Realm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("public_key")]
        public string? Public_key { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("token-service")]
        public string? TokenService { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("account-service")]
        public string? AccountService { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("tokens-not-before")]
        public int? TokensNotBefore { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static PublishedRealmRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<PublishedRealmRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RealmEventsConfigRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("eventsEnabled")]
        public bool? EventsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eventsExpiration")]
        public long? EventsExpiration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eventsListeners")]
        public System.Collections.Generic.ICollection<string>? EventsListeners { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabledEventTypes")]
        public System.Collections.Generic.ICollection<string>? EnabledEventTypes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adminEventsEnabled")]
        public bool? AdminEventsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adminEventsDetailsEnabled")]
        public bool? AdminEventsDetailsEnabled { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RealmEventsConfigRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RealmEventsConfigRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RealmRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realm")]
        public string? Realm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayNameHtml")]
        public string? DisplayNameHtml { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notBefore")]
        public int? NotBefore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultSignatureAlgorithm")]
        public string? DefaultSignatureAlgorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("revokeRefreshToken")]
        public bool? RevokeRefreshToken { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("refreshTokenMaxReuse")]
        public int? RefreshTokenMaxReuse { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessTokenLifespan")]
        public int? AccessTokenLifespan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessTokenLifespanForImplicitFlow")]
        public int? AccessTokenLifespanForImplicitFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ssoSessionIdleTimeout")]
        public int? SsoSessionIdleTimeout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ssoSessionMaxLifespan")]
        public int? SsoSessionMaxLifespan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ssoSessionIdleTimeoutRememberMe")]
        public int? SsoSessionIdleTimeoutRememberMe { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ssoSessionMaxLifespanRememberMe")]
        public int? SsoSessionMaxLifespanRememberMe { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("offlineSessionIdleTimeout")]
        public int? OfflineSessionIdleTimeout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("offlineSessionMaxLifespanEnabled")]
        public bool? OfflineSessionMaxLifespanEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("offlineSessionMaxLifespan")]
        public int? OfflineSessionMaxLifespan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientSessionIdleTimeout")]
        public int? ClientSessionIdleTimeout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientSessionMaxLifespan")]
        public int? ClientSessionMaxLifespan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientOfflineSessionIdleTimeout")]
        public int? ClientOfflineSessionIdleTimeout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientOfflineSessionMaxLifespan")]
        public int? ClientOfflineSessionMaxLifespan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessCodeLifespan")]
        public int? AccessCodeLifespan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessCodeLifespanUserAction")]
        public int? AccessCodeLifespanUserAction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accessCodeLifespanLogin")]
        public int? AccessCodeLifespanLogin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actionTokenGeneratedByAdminLifespan")]
        public int? ActionTokenGeneratedByAdminLifespan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("actionTokenGeneratedByUserLifespan")]
        public int? ActionTokenGeneratedByUserLifespan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("oauth2DeviceCodeLifespan")]
        public int? Oauth2DeviceCodeLifespan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("oauth2DevicePollingInterval")]
        public int? Oauth2DevicePollingInterval { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("sslRequired")]
        public string? SslRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("passwordCredentialGrantAllowed")]
        [System.Obsolete]
        public bool? PasswordCredentialGrantAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationAllowed")]
        public bool? RegistrationAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationEmailAsUsername")]
        public bool? RegistrationEmailAsUsername { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rememberMe")]
        public bool? RememberMe { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("verifyEmail")]
        public bool? VerifyEmail { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loginWithEmailAllowed")]
        public bool? LoginWithEmailAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("duplicateEmailsAllowed")]
        public bool? DuplicateEmailsAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resetPasswordAllowed")]
        public bool? ResetPasswordAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("editUsernameAllowed")]
        public bool? EditUsernameAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userCacheEnabled")]
        [System.Obsolete]
        public bool? UserCacheEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realmCacheEnabled")]
        [System.Obsolete]
        public bool? RealmCacheEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bruteForceProtected")]
        public bool? BruteForceProtected { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permanentLockout")]
        public bool? PermanentLockout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxTemporaryLockouts")]
        public int? MaxTemporaryLockouts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("bruteForceStrategy")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public BruteForceStrategy? BruteForceStrategy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxFailureWaitSeconds")]
        public int? MaxFailureWaitSeconds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("minimumQuickLoginWaitSeconds")]
        public int? MinimumQuickLoginWaitSeconds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("waitIncrementSeconds")]
        public int? WaitIncrementSeconds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("quickLoginCheckMilliSeconds")]
        public long? QuickLoginCheckMilliSeconds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("maxDeltaTimeSeconds")]
        public int? MaxDeltaTimeSeconds { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("failureFactor")]
        public int? FailureFactor { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("privateKey")]
        [System.Obsolete]
        public string? PrivateKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("publicKey")]
        [System.Obsolete]
        public string? PublicKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("certificate")]
        [System.Obsolete]
        public string? Certificate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("codeSecret")]
        [System.Obsolete]
        public string? CodeSecret { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        public RolesRepresentation? Roles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<GroupRepresentation>? Groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultRoles")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<string>? DefaultRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultRole")]
        public RoleRepresentation? DefaultRole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultGroups")]
        public System.Collections.Generic.ICollection<string>? DefaultGroups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiredCredentials")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<string>? RequiredCredentials { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("passwordPolicy")]
        public string? PasswordPolicy { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otpPolicyType")]
        public string? OtpPolicyType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otpPolicyAlgorithm")]
        public string? OtpPolicyAlgorithm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otpPolicyInitialCounter")]
        public int? OtpPolicyInitialCounter { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otpPolicyDigits")]
        public int? OtpPolicyDigits { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otpPolicyLookAheadWindow")]
        public int? OtpPolicyLookAheadWindow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otpPolicyPeriod")]
        public int? OtpPolicyPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otpPolicyCodeReusable")]
        public bool? OtpPolicyCodeReusable { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("otpSupportedApplications")]
        public System.Collections.Generic.ICollection<string>? OtpSupportedApplications { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("localizationTexts")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, string>>? LocalizationTexts { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyRpEntityName")]
        public string? WebAuthnPolicyRpEntityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicySignatureAlgorithms")]
        public System.Collections.Generic.ICollection<string>? WebAuthnPolicySignatureAlgorithms { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyRpId")]
        public string? WebAuthnPolicyRpId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyAttestationConveyancePreference")]
        public string? WebAuthnPolicyAttestationConveyancePreference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyAuthenticatorAttachment")]
        public string? WebAuthnPolicyAuthenticatorAttachment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyRequireResidentKey")]
        public string? WebAuthnPolicyRequireResidentKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyUserVerificationRequirement")]
        public string? WebAuthnPolicyUserVerificationRequirement { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyCreateTimeout")]
        public int? WebAuthnPolicyCreateTimeout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyAvoidSameAuthenticatorRegister")]
        public bool? WebAuthnPolicyAvoidSameAuthenticatorRegister { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyAcceptableAaguids")]
        public System.Collections.Generic.ICollection<string>? WebAuthnPolicyAcceptableAaguids { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyExtraOrigins")]
        public System.Collections.Generic.ICollection<string>? WebAuthnPolicyExtraOrigins { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessRpEntityName")]
        public string? WebAuthnPolicyPasswordlessRpEntityName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessSignatureAlgorithms")]
        public System.Collections.Generic.ICollection<string>? WebAuthnPolicyPasswordlessSignatureAlgorithms { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessRpId")]
        public string? WebAuthnPolicyPasswordlessRpId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessAttestationConveyancePreference")]
        public string? WebAuthnPolicyPasswordlessAttestationConveyancePreference { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessAuthenticatorAttachment")]
        public string? WebAuthnPolicyPasswordlessAuthenticatorAttachment { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessRequireResidentKey")]
        public string? WebAuthnPolicyPasswordlessRequireResidentKey { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessUserVerificationRequirement")]
        public string? WebAuthnPolicyPasswordlessUserVerificationRequirement { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessCreateTimeout")]
        public int? WebAuthnPolicyPasswordlessCreateTimeout { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister")]
        public bool? WebAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessAcceptableAaguids")]
        public System.Collections.Generic.ICollection<string>? WebAuthnPolicyPasswordlessAcceptableAaguids { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("webAuthnPolicyPasswordlessExtraOrigins")]
        public System.Collections.Generic.ICollection<string>? WebAuthnPolicyPasswordlessExtraOrigins { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientProfiles")]
        public ClientProfilesRepresentation? ClientProfiles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientPolicies")]
        public ClientPoliciesRepresentation? ClientPolicies { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("users")]
        public System.Collections.Generic.ICollection<UserRepresentation>? Users { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("federatedUsers")]
        public System.Collections.Generic.ICollection<UserRepresentation>? FederatedUsers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopeMappings")]
        public System.Collections.Generic.ICollection<ScopeMappingRepresentation>? ScopeMappings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientScopeMappings")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ScopeMappingRepresentation>>? ClientScopeMappings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clients")]
        public System.Collections.Generic.ICollection<ClientRepresentation>? Clients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientScopes")]
        public System.Collections.Generic.ICollection<ClientScopeRepresentation>? ClientScopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultDefaultClientScopes")]
        public System.Collections.Generic.ICollection<string>? DefaultDefaultClientScopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultOptionalClientScopes")]
        public System.Collections.Generic.ICollection<string>? DefaultOptionalClientScopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("browserSecurityHeaders")]
        public System.Collections.Generic.IDictionary<string, string>? BrowserSecurityHeaders { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("smtpServer")]
        public System.Collections.Generic.IDictionary<string, string>? SmtpServer { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userFederationProviders")]
        public System.Collections.Generic.ICollection<UserFederationProviderRepresentation>? UserFederationProviders { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userFederationMappers")]
        public System.Collections.Generic.ICollection<UserFederationMapperRepresentation>? UserFederationMappers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("loginTheme")]
        public string? LoginTheme { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("accountTheme")]
        public string? AccountTheme { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adminTheme")]
        public string? AdminTheme { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("emailTheme")]
        public string? EmailTheme { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eventsEnabled")]
        public bool? EventsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eventsExpiration")]
        public long? EventsExpiration { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("eventsListeners")]
        public System.Collections.Generic.ICollection<string>? EventsListeners { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabledEventTypes")]
        public System.Collections.Generic.ICollection<string>? EnabledEventTypes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adminEventsEnabled")]
        public bool? AdminEventsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("adminEventsDetailsEnabled")]
        public bool? AdminEventsDetailsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identityProviders")]
        public System.Collections.Generic.ICollection<IdentityProviderRepresentation>? IdentityProviders { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("identityProviderMappers")]
        public System.Collections.Generic.ICollection<IdentityProviderMapperRepresentation>? IdentityProviderMappers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("protocolMappers")]
        public System.Collections.Generic.ICollection<ProtocolMapperRepresentation>? ProtocolMappers { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("components")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ComponentExportRepresentation>>? Components { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("internationalizationEnabled")]
        public bool? InternationalizationEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("supportedLocales")]
        public System.Collections.Generic.ICollection<string>? SupportedLocales { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultLocale")]
        public string? DefaultLocale { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticationFlows")]
        public System.Collections.Generic.ICollection<AuthenticationFlowRepresentation>? AuthenticationFlows { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("authenticatorConfig")]
        public System.Collections.Generic.ICollection<AuthenticatorConfigRepresentation>? AuthenticatorConfig { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiredActions")]
        public System.Collections.Generic.ICollection<RequiredActionProviderRepresentation>? RequiredActions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("browserFlow")]
        public string? BrowserFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("registrationFlow")]
        public string? RegistrationFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("directGrantFlow")]
        public string? DirectGrantFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resetCredentialsFlow")]
        public string? ResetCredentialsFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientAuthenticationFlow")]
        public string? ClientAuthenticationFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("dockerAuthenticationFlow")]
        public string? DockerAuthenticationFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstBrokerLoginFlow")]
        public string? FirstBrokerLoginFlow { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, string>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("keycloakVersion")]
        public string? KeycloakVersion { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userManagedAccessAllowed")]
        public bool? UserManagedAccessAllowed { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("organizationsEnabled")]
        public bool? OrganizationsEnabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("organizations")]
        public System.Collections.Generic.ICollection<OrganizationRepresentation>? Organizations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("social")]
        [System.Obsolete]
        public bool? Social { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("updateProfileOnInitialSocialLogin")]
        [System.Obsolete]
        public bool? UpdateProfileOnInitialSocialLogin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("socialProviders")]
        [System.Obsolete]
        public System.Collections.Generic.IDictionary<string, string>? SocialProviders { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationScopeMappings")]
        [System.Obsolete]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<ScopeMappingRepresentation>>? ApplicationScopeMappings { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applications")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<ApplicationRepresentation>? Applications { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("oauthClients")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<OAuthClientRepresentation>? OauthClients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientTemplates")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<ClientTemplateRepresentation>? ClientTemplates { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("oAuth2DeviceCodeLifespan")]
        public int? OAuth2DeviceCodeLifespan { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("oAuth2DevicePollingInterval")]
        public int? OAuth2DevicePollingInterval { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RealmRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RealmRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequiredActionConfigInfoRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("properties")]
        public System.Collections.Generic.ICollection<ConfigPropertyRepresentation>? Properties { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RequiredActionConfigInfoRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RequiredActionConfigInfoRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequiredActionConfigRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, string>? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RequiredActionConfigRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RequiredActionConfigRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RequiredActionProviderRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("alias")]
        public string? Alias { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providerId")]
        public string? ProviderId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("defaultAction")]
        public bool? DefaultAction { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int? Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, string>? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RequiredActionProviderRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RequiredActionProviderRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceOwnerRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ResourceOwnerRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ResourceOwnerRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("_id")]
        public string? _id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uris")]
        public System.Collections.Generic.ICollection<string>? Uris { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public string? Type { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<ScopeRepresentation>? Scopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("icon_uri")]
        public string? Icon_uri { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public Owner? Owner { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ownerManagedAccess")]
        public bool? OwnerManagedAccess { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("uri")]
        [System.Obsolete]
        public string? Uri { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopesUma")]
        public System.Collections.Generic.ICollection<ScopeRepresentation>? ScopesUma { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ResourceRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ResourceRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ResourceServerRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public string? ClientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("allowRemoteResourceManagement")]
        public bool? AllowRemoteResourceManagement { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policyEnforcementMode")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public PolicyEnforcementMode? PolicyEnforcementMode { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resources")]
        public System.Collections.Generic.ICollection<ResourceRepresentation>? Resources { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policies")]
        public System.Collections.Generic.ICollection<PolicyRepresentation>? Policies { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<ScopeRepresentation>? Scopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("decisionStrategy")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public DecisionStrategy? DecisionStrategy { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ResourceServerRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ResourceServerRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RoleRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("description")]
        public string? Description { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopeParamRequired")]
        [System.Obsolete]
        public bool? ScopeParamRequired { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("composite")]
        public bool? Composite { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("composites")]
        public Composites? Composites { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientRole")]
        public bool? ClientRole { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("containerId")]
        public string? ContainerId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Attributes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RoleRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RoleRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class RolesRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("realm")]
        public System.Collections.Generic.ICollection<RoleRepresentation>? Realm { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("client")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<RoleRepresentation>>? Client { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("application")]
        [System.Obsolete]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<RoleRepresentation>>? Application { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static RolesRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<RolesRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum ScopeEnforcementMode
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ANY")]
        ANY = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"DISABLED")]
        DISABLED = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScopeMappingRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("self")]
        public string? Self { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("client")]
        public string? Client { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientTemplate")]
        [System.Obsolete]
        public string? ClientTemplate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientScope")]
        public string? ClientScope { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        public System.Collections.Generic.ICollection<string>? Roles { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ScopeMappingRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ScopeMappingRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class ScopeRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("iconUri")]
        public string? IconUri { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("policies")]
        public System.Collections.Generic.ICollection<PolicyRepresentation>? Policies { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("resources")]
        public System.Collections.Generic.ICollection<ResourceRepresentation>? Resources { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static ScopeRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<ScopeRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class SocialLinkRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("socialProvider")]
        public string? SocialProvider { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("socialUserId")]
        public string? SocialUserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("socialUsername")]
        public string? SocialUsername { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static SocialLinkRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<SocialLinkRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UPAttribute
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validations")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, object>>? Validations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("annotations")]
        public System.Collections.Generic.IDictionary<string, object>? Annotations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public UPAttributeRequired? Required { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("permissions")]
        public UPAttributePermissions? Permissions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("selector")]
        public UPAttributeSelector? Selector { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public string? Group { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("multivalued")]
        public bool? Multivalued { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UPAttribute FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UPAttribute>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UPAttributePermissions
    {

        [System.Text.Json.Serialization.JsonPropertyName("view")]
        public System.Collections.Generic.ICollection<string>? View { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("edit")]
        public System.Collections.Generic.ICollection<string>? Edit { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UPAttributePermissions FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UPAttributePermissions>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UPAttributeRequired
    {

        [System.Text.Json.Serialization.JsonPropertyName("roles")]
        public System.Collections.Generic.ICollection<string>? Roles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<string>? Scopes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UPAttributeRequired FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UPAttributeRequired>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UPAttributeSelector
    {

        [System.Text.Json.Serialization.JsonPropertyName("scopes")]
        public System.Collections.Generic.ICollection<string>? Scopes { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UPAttributeSelector FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UPAttributeSelector>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UPConfig
    {

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.ICollection<UPAttribute>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<UPGroup>? Groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("unmanagedAttributePolicy")]
        [System.Text.Json.Serialization.JsonConverter(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        public UnmanagedAttributePolicy? UnmanagedAttributePolicy { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UPConfig FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UPConfig>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UPGroup
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayHeader")]
        public string? DisplayHeader { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayDescription")]
        public string? DisplayDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("annotations")]
        public System.Collections.Generic.IDictionary<string, object>? Annotations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UPGroup FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UPGroup>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Flags]
    public enum UnmanagedAttributePolicy
    {

        [System.Runtime.Serialization.EnumMember(Value = @"ENABLED")]
        ENABLED = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN_VIEW")]
        ADMIN_VIEW = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"ADMIN_EDIT")]
        ADMIN_EDIT = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserConsentRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("clientId")]
        public string? ClientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grantedClientScopes")]
        public System.Collections.Generic.ICollection<string>? GrantedClientScopes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdDate")]
        public long? CreatedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastUpdatedDate")]
        public long? LastUpdatedDate { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("grantedRealmRoles")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<string>? GrantedRealmRoles { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserConsentRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserConsentRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserFederationMapperRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("federationProviderDisplayName")]
        public string? FederationProviderDisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("federationMapperType")]
        public string? FederationMapperType { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, string>? Config { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserFederationMapperRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserFederationMapperRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserFederationProviderRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("providerName")]
        public string? ProviderName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("config")]
        public System.Collections.Generic.IDictionary<string, string>? Config { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("priority")]
        public int? Priority { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("fullSyncPeriod")]
        public int? FullSyncPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("changedSyncPeriod")]
        public int? ChangedSyncPeriod { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastSync")]
        public int? LastSync { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserFederationProviderRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserFederationProviderRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserProfileAttributeGroupMetadata
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayHeader")]
        public string? DisplayHeader { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayDescription")]
        public string? DisplayDescription { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("annotations")]
        public System.Collections.Generic.IDictionary<string, object>? Annotations { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserProfileAttributeGroupMetadata FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserProfileAttributeGroupMetadata>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserProfileAttributeMetadata
    {

        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("displayName")]
        public string? DisplayName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("required")]
        public bool? Required { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("readOnly")]
        public bool? ReadOnly { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("annotations")]
        public System.Collections.Generic.IDictionary<string, object>? Annotations { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("validators")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.IDictionary<string, object>>? Validators { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("group")]
        public string? Group { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("multivalued")]
        public bool? Multivalued { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserProfileAttributeMetadata FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserProfileAttributeMetadata>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserProfileMetadata
    {

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.ICollection<UserProfileAttributeMetadata>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<UserProfileAttributeGroupMetadata>? Groups { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserProfileMetadata FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserProfileMetadata>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string? Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("emailVerified")]
        public bool? EmailVerified { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("attributes")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? Attributes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userProfileMetadata")]
        public UserProfileMetadata? UserProfileMetadata { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("self")]
        public string? Self { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("origin")]
        public string? Origin { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("createdTimestamp")]
        public long? CreatedTimestamp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("enabled")]
        public bool? Enabled { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("totp")]
        public bool? Totp { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("federationLink")]
        public string? FederationLink { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("serviceAccountClientId")]
        public string? ServiceAccountClientId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("credentials")]
        public System.Collections.Generic.ICollection<CredentialRepresentation>? Credentials { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("disableableCredentialTypes")]
        public System.Collections.Generic.ICollection<string>? DisableableCredentialTypes { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("requiredActions")]
        public System.Collections.Generic.ICollection<string>? RequiredActions { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("federatedIdentities")]
        public System.Collections.Generic.ICollection<FederatedIdentityRepresentation>? FederatedIdentities { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("realmRoles")]
        public System.Collections.Generic.ICollection<string>? RealmRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientRoles")]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? ClientRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clientConsents")]
        public System.Collections.Generic.ICollection<UserConsentRepresentation>? ClientConsents { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("notBefore")]
        public int? NotBefore { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("applicationRoles")]
        [System.Obsolete]
        public System.Collections.Generic.IDictionary<string, System.Collections.Generic.ICollection<string>>? ApplicationRoles { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("socialLinks")]
        [System.Obsolete]
        public System.Collections.Generic.ICollection<SocialLinkRepresentation>? SocialLinks { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("groups")]
        public System.Collections.Generic.ICollection<string>? Groups { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("access")]
        public System.Collections.Generic.IDictionary<string, bool>? Access { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class UserSessionRepresentation
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("username")]
        public string? Username { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("userId")]
        public string? UserId { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("ipAddress")]
        public string? IpAddress { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("start")]
        public long? Start { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastAccess")]
        public long? LastAccess { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("rememberMe")]
        public bool? RememberMe { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("clients")]
        public System.Collections.Generic.IDictionary<string, string>? Clients { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("transientUser")]
        public bool? TransientUser { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static UserSessionRepresentation FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<UserSessionRepresentation>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body
    {

        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string? Id { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Body2
    {

        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; } = default!;

        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; } = default!;

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Body2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Body2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class Claims : ClaimRepresentation
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Claims FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Claims>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class Config : System.Collections.Generic.Dictionary<string, System.Collections.ObjectModel.Collection<string>>
    {

        private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

        [System.Text.Json.Serialization.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
            set { _additionalProperties = value; }
        }

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Config FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Config>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    [System.Obsolete]
    public partial class Claims2 : ClaimRepresentation
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Claims2 FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Claims2>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class Owner : ResourceOwnerRepresentation
    {

        public string ToJson()
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Serialize(this, options);

        }
        public static Owner FromJson(string data)
        {

            var options = new System.Text.Json.JsonSerializerOptions();

            return System.Text.Json.JsonSerializer.Deserialize<Owner>(data, options);

        }

    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileParameter
    {
        public FileParameter(System.IO.Stream data)
            : this (data, null, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName)
            : this (data, fileName, null)
        {
        }

        public FileParameter(System.IO.Stream data, string? fileName, string? contentType)
        {
            Data = data;
            FileName = fileName;
            ContentType = contentType;
        }

        public System.IO.Stream Data { get; private set; }

        public string? FileName { get; private set; }

        public string? ContentType { get; private set; }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class FileResponse : System.IDisposable
    {
        private System.IDisposable? _client;
        private System.IDisposable? _response;

        public int StatusCode { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public System.IO.Stream Stream { get; private set; }

        public bool IsPartial
        {
            get { return StatusCode == 206; }
        }

        public FileResponse(int statusCode, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.IO.Stream stream, System.IDisposable? client, System.IDisposable? response)
        {
            StatusCode = statusCode;
            Headers = headers;
            Stream = stream;
            _client = client;
            _response = response;
        }

        public void Dispose()
        {
            Stream.Dispose();
            if (_response != null)
                _response.Dispose();
            if (_client != null)
                _client.Dispose();
        }
    }


    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeycloakGeneratedApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string? Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public KeycloakGeneratedApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception? innerException)
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null) ? "(null)" : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException)
        {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "14.2.0.0 (NJsonSchema v11.1.0.0 (Newtonsoft.Json v13.0.0.0))")]
    public partial class KeycloakGeneratedApiException<TResult> : KeycloakGeneratedApiException
    {
        public TResult Result { get; private set; }

        public KeycloakGeneratedApiException(string message, int statusCode, string? response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception? innerException)
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore  108
#pragma warning restore  114
#pragma warning restore  472
#pragma warning restore  612
#pragma warning restore 1573
#pragma warning restore 1591
#pragma warning restore 8073
#pragma warning restore 3016
#pragma warning restore 8603
#pragma warning restore 8604
#pragma warning restore 8625